package algorithm;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

import java.math.BigDecimal;
import java.util.*;


public class Forkbk {


    private  static double lineK = 0.38;  //默认曲线斜率最低值

    private String JsonStrTest = "[{\"qrcode\":\"190620833405\",\"IIqrcode\":\"000000000003\",\"ao\":\"0\",\"seq\":\"00\",\"data\":\"91|91|87|79|75|74|72|69|69|64|58|55|50|52|48|48|41|39|32|31|20|17|17|58|43|22|-1|-17|-18|-22|-25|-33|-36|-41|-46|-51|-57|-60|-62|-68|-73|-77|-82|-83|-87|-89|-94|-94|-96|-102|-99|-109|-110|-113|-116|-113|-115|-114|-120|-118|-126|-123|-125|-123|-126|-120|-126|-124|-127|-125|-125|-122|-123|-117|-113|-108|-105|-102|-98|-98|-94|-88|-91|-84|-82|-81|-77|-71|-69|-65|-58|-52|-48|-44|-41|-38|-35|-23|-18|-15|-9|-6|-3|-2|7|12|17|24|28|34|35|40|41|47|53|58|55|59|64|64|68|74|74|74|79|84|86|84|88|90|88|97|94|93|93|94|98|100|97|95|93|97|96|94|94|93|86|81|71|68|71|71|68|61|60|60|54|51|51|45|43|33|30|24|23|15|47|52|41|19|6|-18|-20|-21|-27|-31|-36|-41|-48|-50|-54|-58|-64|-68|-70|-77|-80|-80|-87|-91|-88|-93|-99|-101|-102|-107|-108|-113|-111|-116|-115|-118|-118|-120|-122|-124|-125|-125|-126|-123|-128|-126|-125|-126|-126|-124|-123|-116|-119|-107|-106|-95|-100|-98|-91|-93|-90|-86|-84|-80|-76|-75|-70|-64|-62|-58|-51|-41|-36|-33|-28|-21|-17|-14|-10|-7|1|4|9|11|16|19|27|37|33|41|48|52|54|57|57|62|65|69|70|78|78|79|82|85|86|87|90|91|93|94|93|95|93|90|97|96|98|99|96|96|92|93|90|86|81|74|70|69|70|68|61|59|59|55|49|50|43|39|35|32|26|26|17|29|54|39|21|3|-15|-20|-22|-29|-30|-36|-44|-45|-51|-56|-59|-63|-68|-70|-79|-78|-80|-91|-91|-93|-97|-97|-101|-100|-104|-108|-22|-18|-19|-23|-22|-21|-24|-21|-23|-23|-21|-21|-23|-20|-22|-20|-21|-23|-24|-20|-21|-22|-22|-24|-25|-23|-22|-22|-23|-24|-26|-25|-22|-23|-26|-18|-23|-23|-21|-24|-24|-22|-21|-22|-22|-21|-25|-24|-20|-25|-21|-24|-24|-21|-20|-23|-23|-23|-23|-25|-23|-20|-23|-26|-22|-23|-23|-25|-22|-25|-26|-20|-26|-23|-24|-22|-24|-24|-22|-23|-23|-25|-30|-24|-22|-21|-24|-22|-21|-22|-25|-21|-23|-29|-28|-23|-23|-24|-24|-20|-21|-23|-22|-25|-23|-26|-26|-23|-21|-23|-22|-22|-19|-23|-23|-20|-22|-25|-21|-23|-23|-24|-20|-24|-21|-21|-26|-22|-21|-25|-23|-21|-21|-22|-23|-24|-23|-24|-23|-18|-21|-21|-23|-25|-24|-23|-24|-23|-23|-22|-23|-23|-21|-22|-21|-20|-23|-21|-23|-22|-25|-23|-29|-22|-21|-23|-23|-19|-18|-21|-21|-24|-20|-25|-23|-23|-23|-24|-22|-20|-23|-23|-26|-26|-21|-21|-25|-24|-21|-21|-22|-21|-22|-23|-24|-21|-22|-24|-24|-23|-24|-23|-21|-21|-23|-24|-22|-18|-21|-25|-23|-24|-24|-21|-23|-20|-22|-24|-25|-26|-26|-23|-21|-22|-24|-23|-22|-24|-26|-22|-24|-21|-22|-23|-24|-23|-23|-23|-23|-24|-26|-25|-23|-21|-23|-26|-22|-26|-23|-20|-23|-26|-21|-24|-25|-23|-24|-22|-23|-23|-24|-23|-21|-16|-25|-21|-24|-24|-23|-21|-22|-21|-22|-22|-25|-25|-21|-23|-23|-22|-19|-23|-24|-21|-25|-28|-25|-26|-23|-23|-23|-24|-24|-23|-23|-22|-20|-20|-22|-21|-22|-24|-25|-24|-23|-24|-23|-23|-26|-25|-23|-23|-24|-23|-22|-23|-22|-21|-24|-20|-26|-22|-20|-22|-24|-22|-27|-22|-23|-24|-23|-19|-19|-26|-21|-24|-23|-22|-23|-21|-27|-26|-28|-28|-26|-26|-26|-30|-28|-27|-23|-27|-27|-27|-27|-27|-26|-23|-28|-26|-27|-25|-27|-27|-25|-24|-30|-29|-26|-29|-28|-29|-28|-27|-31|-27|-29|-30|-28|-29|-23|-24|-26|-31|-28|-23|-32|-31|-28|-26|-25|-25|-25|-29|-26|-26|-25|-25|-26|-29|-24|-26|-22|-25|-26|-26|-26|-28|-27|-26|-26|-27|-28|-26|-26|-21|-24|-25|-26|-26|-22|-26|-29|-27|-25|-33|-26|-22|-25|-25|-25|-25|-24|-28|-26|-29|-30|-22|-26|-24|-23|-24|-25|-28|-24|-28|-28|-25|-24|-31|-27|-29|-24|-27|-24|-33|-32|-29|-23|-25|-29|-25|-26|-30|-27|-21|-28|-26|-29|-26|-27|-25|-26|-30|-29|-26|-25|-27|-24|-26|-25|-25|-27|-27|-29|-25|-26|-28|-31|-29|-26|-25|-29|-22|-28|-31|-28|-28|-27|-29|-26|-27|-28|-31|-30|-28|-27|-28|-28|-25|-27|-26|-28|-25|-27|-26|-25|-28|-30|-28|-27|-27|-24|-30|-29|-24|-26|-26|-24|-27|-24|-27|-25|-27|-28|-24|-25|-27|-29|-25|-28|-26|-30|-27|-25|-26|-26|-26|-26|-26|-28|-26|-26|-29|-26|-26|-27|-27|-27|-28|-27|-27|-25|-26|-26|-25|-24|-26|-26|-26|-25|-24|-25|-29|-25|-25|-23|-23|-27|-26|-31|-29|-27|-28|-26|-27|-27|-25|-25|-24|-26|-24|-26|-25|-24|-24|-26|-25|-26|-26|-31|-29|-25|-28|-27|-25|-26|-25|-26|-26|-31|-29|-25|-25|-27|-28|-28|-27|-27|-26|-25|-28|-27|-27|-28|-23|-25|-24|-29|-27|-27|-26|-27|-26|-28|-26|-23|-26|-28|-25|-29|-29|-28|-30|-26|-27|-29|-28|-27|-26|-29|-27|-25|-25|-23|-24|-28|-29|-23|-25|-27|-25|-26|-29|-30|-27|-26|-31|-32|-28|-27|-28|-28|-27|-27|-27|-27|-24|-28|-28|\",\"phase\":\"00\",\"report_time\":\"2020-07-16 14:07:44\"}, {\"qrcode\":\"190620833405\",\"IIqrcode\":\"000000000021\",\"ao\":\"0\",\"seq\":\"00\",\"data\":\"83|81|72|70|66|66|63|60|60|56|51|44|47|43|39|37|32|26|20|14|9|3|-4|-8|-12|-20|-21|-27|-30|-31|-37|-41|-46|-52|-61|-59|-63|-69|-78|-81|-84|-86|-89|-89|-98|-97|-98|-102|-104|-110|-110|-115|-119|-118|-119|-120|-120|-122|-124|-127|-130|-127|-130|-128|-129|-127|-129|-130|-132|-127|-124|-123|-123|-115|-111|-102|-104|-102|-107|-98|-94|-88|-88|-86|-85|-81|-73|-70|-69|-68|-61|-55|-48|-42|-37|-28|-25|-21|-17|-12|-11|-5|-1|4|11|15|16|25|31|28|31|38|42|43|50|50|56|57|62|63|70|71|75|77|76|80|82|82|85|85|85|92|92|88|88|93|88|93|89|90|93|88|91|89|83|81|72|68|64|67|65|64|56|56|50|48|49|40|39|34|31|23|21|16|6|-3|-7|-11|-13|-19|-20|-25|-27|-31|-37|-41|-45|-53|-56|-60|-67|-69|-75|-78|-81|-81|-90|-93|-94|-100|-102|-102|-109|-109|-109|-113|-118|-121|-119|-122|-121|-125|-124|-130|-124|-125|-128|-126|-128|-123|-129|-131|-129|-129|-128|-127|-123|-120|-111|-110|-104|-103|-100|-97|-94|-92|-90|-89|-82|-82|-79|-75|-68|-62|-59|-54|-48|-44|-37|-30|-26|-24|-16|-11|-10|-9|0|0|9|13|17|22|25|30|33|36|44|43|50|51|56|58|61|64|67|72|72|76|82|79|79|83|82|84|88|85|90|88|91|89|90|91|91|93|93|92|93|87|84|82|74|68|66|65|65|60|55|52|51|50|42|42|38|37|33|24|24|15|7|1|-1|-7|-12|-15|-20|-26|-30|-35|-39|-43|-46|-52|-55|-58|-62|-69|-75|-76|-83|-82|-87|-90|-96|-96|-101|-105|-108|-111|-112|-116|-22|-26|-25|-24|-24|-27|-25|-26|-24|-23|-24|-26|-28|-26|-21|-22|-24|-24|-25|-27|-25|-23|-23|-25|-22|-24|-26|-27|-25|-25|-27|-24|-22|-23|-22|-23|-22|-25|-25|-24|-28|-24|-25|-23|-21|-27|-23|-25|-25|-26|-29|-24|-26|-23|-22|-23|-25|-25|-25|-24|-21|-29|-25|-22|-26|-24|-23|-22|-26|-24|-25|-24|-29|-29|-23|-24|-24|-23|-23|-23|-23|-25|-24|-26|-26|-27|-26|-24|-25|-23|-26|-24|-24|-28|-30|-22|-26|-24|-23|-20|-23|-25|-22|-24|-22|-24|-24|-26|-24|-23|-24|-24|-23|-24|-23|-25|-25|-25|-25|-23|-22|-22|-25|-24|-25|-21|-23|-29|-24|-23|-22|-28|-27|-23|-25|-25|-22|-31|-25|-24|-23|-24|-23|-23|-25|-25|-24|-23|-22|-24|-25|-25|-23|-23|-22|-23|-24|-26|-24|-21|-26|-22|-24|-23|-24|-23|-21|-25|-25|-21|-28|-26|-24|-25|-23|-21|-22|-25|-24|-28|-24|-17|-27|-22|-26|-26|-26|-23|-22|-25|-25|-25|-24|-27|-23|-24|-23|-25|-25|-26|-22|-24|-23|-28|-26|-22|-23|-24|-22|-22|-21|-23|-25|-21|-19|-22|-22|-23|-23|-24|-22|-22|-22|-27|-21|-31|-25|-26|-26|-25|-24|-23|-24|-25|-25|-21|-29|-22|-23|-24|-24|-25|-25|-24|-24|-24|-23|-27|-23|-25|-25|-24|-21|-26|-23|-23|-23|-21|-20|-24|-23|-23|-20|-29|-24|-27|-24|-20|-20|-19|-23|-25|-26|-25|-21|-26|-24|-23|-21|-23|-26|-21|-21|-21|-26|-24|-21|-25|-23|-24|-24|-24|-24|-26|-23|-23|-22|-23|-23|-26|-21|-20|-24|-22|-23|-23|-26|-24|-24|-25|-23|-20|-22|-25|-25|-23|-24|-25|-23|-26|-23|-25|-22|-22|-25|-25|-26|-25|-26|-24|-26|-26|-26|-32|-29|-25|-24|-22|-25|-19|-29|-24|-26|-28|-28|-27|-29|-30|-30|-27|-26|-30|-29|-28|-29|-25|-25|-26|-30|-30|-28|-28|-28|-25|-26|-26|-31|-26|-27|-26|-27|-28|-27|-30|-26|-28|-26|-26|-23|-28|-29|-26|-26|-28|-25|-29|-24|-26|-31|-27|-29|-30|-27|-27|-28|-28|-23|-29|-26|-26|-27|-29|-24|-29|-28|-28|-26|-26|-28|-26|-23|-29|-26|-28|-30|-21|-29|-28|-27|-26|-27|-25|-27|-27|-26|-26|-28|-28|-26|-26|-26|-25|-28|-27|-30|-28|-29|-27|-28|-29|-27|-28|-27|-27|-28|-28|-26|-26|-23|-27|-25|-29|-27|-29|-25|-25|-28|-27|-26|-29|-26|-27|-25|-34|-32|-27|-27|-27|-24|-27|-28|-28|-25|-28|-28|-29|-24|-30|-28|-29|-25|-25|-23|-32|-27|-27|-29|-26|-27|-28|-28|-27|-26|-27|-27|-25|-29|-29|-25|-28|-27|-23|-31|-25|-26|-29|-30|-27|-28|-30|-28|-25|-26|-27|-25|-28|-28|-26|-25|-30|-31|-30|-26|-27|-29|-31|-28|-27|-28|-26|-30|-31|-26|-27|-25|-27|-27|-28|-25|-29|-27|-27|-29|-27|-26|-26|-27|-29|-28|-26|-26|-26|-27|-27|-28|-27|-27|-24|-25|-30|-29|-30|-27|-26|-29|-27|-29|-24|-24|-27|-24|-29|-27|-26|-26|-33|-27|-25|-30|-27|-28|-26|-29|-27|-29|-29|-29|-27|-27|-25|-25|-26|-25|-25|-28|-27|-33|-27|-26|-28|-27|-26|-27|-28|-31|-26|-24|-27|-26|-29|-28|-25|-28|-29|-24|-32|-27|-25|-27|-28|-23|-23|-24|-28|-29|-24|-29|-27|-29|-29|-26|-25|-27|-28|-27|-29|-26|-28|-28|-26|-26|-28|-28|-28|-29|-31|-26|-26|-27|-25|-28|-26|-27|-27|-29|-27|-29|-25|-29|-29|-28|-27|-27|-30|-28|-27|-26|-26|-28|-28|-30|-28|-30|-26|-27|-27|-28|-27|-25|-24|\",\"phase\":\"00\",\"report_time\":\"2020-07-16 14:07:44\"}, {\"qrcode\":\"000000000002\",\"IIqrcode\":\"000000000003\",\"ao\":\"0\",\"seq\":\"00\",\"data\":\"89|86|84|79|71|70|72|68|63|62|58|57|54|50|47|43|40|35|27|25|19|14|7|4|-6|-14|-14|-18|-21|-24|-29|-33|-43|-46|-51|-53|-57|-65|-67|-70|-71|-75|-81|-87|-87|-89|-92|-96|-100|-104|-107|-109|-106|-115|-115|-117|-120|-121|-117|-123|-126|-121|-124|-121|-125|-123|-127|-124|-127|-122|-126|-121|-121|-113|-113|-102|-102|-103|-98|-96|-92|-89|-86|-85|-79|-77|-75|-70|-63|-61|-55|-52|-45|-42|-35|-29|-22|-20|-20|-10|-6|-3|3|8|15|17|21|24|30|34|36|44|48|49|53|57|64|61|64|69|75|76|76|80|81|82|84|88|86|88|94|91|97|100|94|95|93|96|100|94|100|96|96|93|91|88|80|76|73|71|72|68|62|62|60|54|49|53|45|41|36|29|32|23|18|12|7|2|-4|-11|-14|-19|-20|-22|-28|-33|-41|-45|-48|-51|-56|-61|-65|-70|-75|-79|-81|-87|-88|-88|-94|-97|-98|-107|-108|-108|-110|-112|-113|-113|-119|-118|-120|-119|-124|-124|-124|-123|-123|-121|-129|-127|-126|-122|-124|-122|-121|-116|-108|-104|-100|-98|-94|-94|-95|-88|-83|-83|-85|-78|-75|-68|-61|-61|-59|-56|-49|-42|-36|-28|-26|-17|-16|-10|-7|-3|1|8|13|17|21|26|31|32|39|41|45|52|54|55|59|60|67|70|74|74|79|82|81|84|86|86|90|89|89|94|94|93|93|93|96|95|98|99|93|98|101|93|90|86|81|75|75|70|69|66|61|58|58|53|53|47|40|42|38|33|31|24|19|16|9|3|-2|-8|-12|-22|-21|-24|-30|-36|-39|-46|-47|-54|-58|-61|-67|-72|-73|-78|-82|-86|-88|-90|-94|-96|-100|-100|-103|-104|-26|-23|-22|-24|-23|-24|-23|-24|-22|-23|-23|-23|-26|-25|-20|-19|-25|-20|-24|-24|-25|-25|-22|-22|-24|-22|-19|-25|-20|-21|-20|-22|-20|-22|-24|-22|-21|-26|-22|-23|-22|-23|-23|-24|-21|-22|-24|-24|-22|-32|-24|-17|-23|-23|-24|-22|-22|-23|-22|-22|-26|-25|-23|-24|-27|-24|-23|-24|-24|-23|10|44|30|8|-16|-23|-21|-25|-24|-22|-28|-23|-23|-22|-25|-23|-24|-24|-24|-24|-20|-18|-27|-22|-22|-22|-23|-22|-23|-27|-24|-19|-24|-20|-21|-26|-24|-25|-23|-24|-22|-23|-25|-26|-25|-24|-23|-22|-24|-24|-24|-23|-20|-24|-25|-22|-26|-21|-22|-20|-20|-23|-21|-21|-23|-23|-24|-24|-24|-21|-23|-22|-19|-22|-24|-24|-24|-23|-24|-24|-23|-25|-21|-23|-23|-23|-21|-26|-22|-19|-25|-22|-25|-25|-23|-24|-25|-21|-22|-23|-25|-23|-22|-23|-21|-23|-28|-21|-25|-24|-22|-28|-23|-22|-23|-23|-24|-23|-22|-23|-24|-24|-20|-25|-23|-22|-22|-23|-23|-22|-22|-24|-21|-24|-22|-22|-24|-23|-26|-22|-27|-24|-24|-21|44|43|32|11|-15|-21|-20|-23|-23|-22|-24|-24|-22|-23|-21|-23|-26|-22|-23|-24|-23|-25|-23|-21|-28|-20|-22|-22|-21|-22|-24|-22|-24|-21|-13|-27|-22|-23|-25|-24|-24|-23|-25|-25|-21|-30|-24|-23|-25|-23|-23|-24|-24|-24|-24|-21|-20|-21|-21|-24|-24|-21|-22|-24|-26|-24|-21|-24|-21|-24|-25|-22|-25|-24|-23|-23|-24|-23|-27|-25|-25|-22|-20|-23|-20|-20|-25|-24|-21|-23|-18|-23|-23|-24|-22|-27|-22|-24|-23|-24|-23|-23|-23|-26|-23|-24|-19|-23|-22|-24|-25|-22|-26|-23|-23|-23|-22|-24|-24|-22|-21|-23|-25|-24|-23|-24|-24|-28|-30|-26|-28|-26|-30|-27|-27|-28|-24|-26|-30|-27|-29|-28|-28|-25|-26|-27|-28|-24|-24|-30|-29|-24|-27|-25|-28|-26|-29|-29|-27|-28|-30|-27|-26|-24|-29|-30|-26|-28|-28|-25|-23|-27|-26|-26|-29|-33|-31|-27|-29|-26|-25|-27|-26|-29|-29|-22|-25|-28|-26|-28|-27|-22|-26|-22|-25|-27|-24|-27|-26|-29|-27|-29|-26|-24|-27|-29|-23|-27|-28|-31|-24|-26|-22|-23|-34|-29|-25|-28|-27|-23|-26|-26|-26|-27|-28|-28|-25|-25|-27|-27|-28|-28|-28|-23|-24|-26|-28|-28|-25|-26|-24|-28|-28|-24|-27|-23|-25|-28|-25|-28|-26|-26|-24|-26|-27|-26|-22|-26|-27|-25|-26|-26|-24|-26|-29|-24|-29|-26|-31|-26|-26|-26|-27|-24|-27|-26|-28|-29|-29|-26|-25|-28|-26|-27|-25|-29|-28|-30|-26|-25|-28|-28|-27|-28|-27|-25|-27|-28|-25|-26|-29|-25|-26|-27|-28|-25|-27|-25|-29|-26|-29|-30|-25|-25|-27|-26|-28|-31|-28|-28|-23|-19|-27|-25|-29|-26|-29|-26|-24|-29|-27|-29|-26|-25|-27|-26|-25|-26|-26|-24|-26|-27|-26|-26|-28|-23|-27|-26|-24|-25|-31|-28|-27|-26|-26|-22|-28|-23|-26|-25|-26|-27|-23|-25|-28|-24|-24|-25|-29|-26|-29|-28|-21|-24|-25|-28|-26|-27|-27|-24|-29|-28|-23|-26|-25|-28|-26|-27|-25|-25|-24|-31|-26|-27|-28|-27|-25|-27|-28|-26|-31|-26|-25|-25|-25|-27|-26|-25|-28|-25|-24|-28|-26|-25|-27|-26|-28|-29|-27|-25|-24|-28|-25|-29|-30|-29|-26|-25|-28|-25|-23|-26|-27|-27|-28|-31|-27|-28|-26|-31|-30|-25|-23|-27|-25|-27|-27|-29|-27|-26|-28|-25|-26|-26|-26|-27|-27|-25|-26|-24|-27|-26|-26|-27|-27|-29|\",\"phase\":\"00\",\"report_time\":\"2020-07-16 14:07:44\"}, {\"qrcode\":\"000000000002\",\"IIqrcode\":\"000000000021\",\"ao\":\"0\",\"seq\":\"00\",\"data\":\"85|82|75|75|71|66|63|63|62|53|54|49|46|43|39|33|30|26|22|17|13|7|1|-3|-11|-13|-20|-22|-27|-28|-37|-41|-47|-50|-52|-56|-60|-68|-72|-78|-80|-84|-80|-88|-95|-97|-98|-104|-104|-110|-112|-116|-113|-118|-119|-116|-121|-122|-121|-123|-132|-128|-129|-126|-130|-129|-133|-132|-132|-125|-130|-123|-125|-121|-114|-110|-110|-104|-101|-101|-95|-95|-92|-90|-87|-84|-78|-75|-70|-63|-61|-57|-49|-45|-41|-35|-26|-22|-20|-14|-13|-8|-3|3|10|9|16|21|23|31|35|39|41|45|49|55|59|58|59|62|68|68|71|76|77|81|83|80|84|90|89|88|90|90|91|92|91|86|92|89|91|89|90|88|86|82|77|72|68|68|64|64|54|55|51|52|44|41|41|35|32|26|22|19|15|6|-3|-6|-14|-14|-23|-24|-30|-30|-36|-40|-47|-54|-53|-57|-63|-67|-72|-78|-83|-86|-89|-92|-91|-96|-98|-101|-107|-107|-112|-111|-117|-116|-117|-120|-121|-126|-125|-127|-125|-131|-127|-130|-127|-132|-126|-134|-127|-128|-127|-131|-125|-119|-109|-109|-101|-104|-103|-99|-97|-98|-91|-91|-82|-81|-77|-67|-67|-66|-62|-54|-52|-45|-39|-34|-27|-21|-15|-8|-8|-8|-2|0|8|13|19|21|24|29|33|39|38|44|50|52|56|59|62|66|68|71|69|72|77|83|81|80|85|85|88|89|87|86|88|91|92|93|90|89|93|90|91|87|85|84|77|69|65|66|67|61|59|56|54|47|48|43|40|35|31|22|21|16|12|7|-3|-6|-11|-16|-21|-23|-28|-29|-36|-40|-46|-50|-56|-59|-65|-68|-74|-76|-79|-86|-87|-90|-94|-97|-100|-101|-102|-108|-111|-114|-24|-23|-26|-26|-24|-25|-23|-23|-24|-19|-25|-25|-25|-24|-24|-21|-23|-25|-25|-23|-27|-26|-23|-21|-25|-22|-19|-26|-25|-21|-23|-19|-24|-24|-23|-22|-24|-25|-24|-23|-21|-22|-21|-25|-22|-25|-24|-25|-20|-23|-22|-26|-25|-25|-23|-23|-25|-19|-24|-24|-23|-22|-24|-23|-26|-26|-25|-23|-22|-32|-25|-22|-22|-21|-25|-23|-23|-21|-24|-24|-21|-25|-22|-24|-25|-24|-24|-22|-23|-23|-23|-26|-25|-23|-22|-23|-21|-23|-27|-22|-23|-23|-21|-25|-23|-23|-24|-21|-25|-26|-25|-25|-26|-26|-24|-21|-23|-25|-24|-23|-28|-26|-27|-21|-21|-27|-24|-25|-22|-26|-25|-22|-25|-23|-24|-23|-25|-24|-22|-24|-23|-24|-26|-25|-21|-26|-23|-24|-26|-24|-22|-25|-22|-24|-25|-23|-27|-23|-23|-25|-25|-25|-24|-23|-24|-23|-23|-26|-26|-25|-26|-22|-22|-24|-21|-24|-25|-24|-24|-26|-25|-24|-23|-21|-28|-24|-25|-24|-22|-23|-25|-24|-25|-25|-24|-23|-23|-24|-25|-23|-22|-25|-23|-23|-24|-26|-25|-22|-25|-23|-25|-26|-25|-24|-24|-20|-21|-25|-24|-25|-23|-24|-20|-22|-23|-22|-24|-26|-22|-22|-24|-22|-28|-28|-23|-25|-24|-22|-24|-23|-24|-27|-22|-27|-27|-27|-25|-25|-23|-27|-25|-24|-23|-23|-26|-24|-22|-25|-27|-25|-23|-26|-24|-23|-21|-26|-24|-23|-24|-23|-23|-23|-24|-23|-26|-21|-29|-22|-22|-23|-23|-22|-24|-22|-21|-23|-20|-25|-23|-21|-25|-20|-23|-23|-23|-24|-23|-22|-23|-22|-22|-27|-20|-26|-21|-22|-24|-23|-21|-24|-25|-23|-26|-24|-22|-23|-25|-24|-25|-26|-24|-27|-22|-23|-27|-23|-21|-25|-26|-23|-23|-24|-23|-22|-25|-25|-24|-21|-23|-23|-28|-28|-26|-24|-28|-30|-26|-29|-28|-30|-27|-26|-25|-29|-28|-27|-26|-29|-26|-31|-31|-28|-27|-31|-29|-28|-28|-29|-29|-28|-27|-27|-29|-26|-27|-24|-28|-29|-26|-30|-28|-27|-28|-30|-28|-28|-29|-24|-26|-29|-30|-27|-26|-27|-27|-27|-28|-26|-26|-27|-26|-28|-26|-27|-29|-28|-31|-29|-26|-26|-25|-28|-26|-25|-26|-29|-27|-25|-31|-27|-29|-25|-25|-28|-26|-25|-28|-25|-23|-25|-30|-24|-27|-30|-31|-29|-28|-25|-25|-29|-24|-24|-26|-28|-29|-29|-23|-26|-27|-28|-24|-25|-27|-25|-26|-27|-30|-27|-27|-29|-30|-27|-26|-28|-29|-24|-28|-29|-26|-28|-29|-29|-27|-23|-29|-27|-26|-29|-27|-26|-27|-27|-31|-28|-24|-27|-27|-27|-25|-30|-26|-26|-24|-30|-29|-29|-28|-28|-27|-30|-31|-29|-28|-29|-27|-25|-30|-28|-30|-29|-28|-25|-27|-27|-27|-26|-25|-30|-27|-25|-25|-28|-29|-28|-30|-25|-28|-26|-30|-28|-30|-27|-27|-26|-28|-28|-27|-29|-27|-36|-29|-27|-22|-28|-29|-29|-26|-27|-24|-27|-29|-25|-29|-29|-28|-28|-29|-27|-34|-29|-28|-25|-25|-27|-29|-26|-29|-28|-26|-27|-26|-26|-26|-27|-28|-25|-26|-30|-26|-25|-28|-29|-25|-28|-30|-27|-26|-25|-27|-25|-28|-25|-27|-28|-28|-29|-32|-26|-27|-29|-28|-23|-26|-25|-27|-26|-23|-25|-30|-27|-25|-24|-26|-25|-25|-26|-29|-27|-26|-29|-22|-29|-28|-27|-23|-27|-29|-28|-29|-24|-26|-29|-25|-26|-32|-30|-27|-27|-27|-27|-27|-26|-29|-24|-27|-27|-25|-29|-29|-30|-30|-27|-27|-34|-27|-29|-29|-27|-26|-26|-26|-29|-30|-29|-26|-26|-30|-27|-29|-28|-29|-27|-30|-30|-26|-26|-32|-29|-27|-30|\",\"phase\":\"00\",\"report_time\":\"2020-07-16 14:07:44\"}, {\"qrcode\":\"041906934543\",\"IIqrcode\":\"000000000003\",\"ao\":\"0\",\"seq\":\"00\",\"data\":\"88|82|74|70|70|69|67|65|60|60|51|50|50|45|42|41|36|30|24|19|15|65|60|41|20|-8|-22|-24|-27|-28|-34|-39|-45|-50|-49|-56|-63|-66|-68|-73|-79|-79|-81|-90|-91|-96|-95|-103|-103|-107|-106|-109|-108|-112|-119|-116|-118|-119|-120|-123|-125|-120|-129|-127|-130|-124|-129|-125|-126|-124|-125|-118|-119|-109|-106|-103|-96|-101|-95|-93|-90|-89|-85|-82|-80|-75|-71|-66|-59|-57|-53|-47|-39|-38|-33|-27|-20|-13|-10|-10|-5|-2|4|13|12|18|25|27|32|36|45|45|49|52|54|59|61|61|64|68|72|75|84|79|82|82|84|89|93|91|95|94|94|94|93|97|96|96|99|96|96|97|95|89|87|80|76|75|75|72|68|65|61|58|57|53|50|46|42|40|34|30|22|13|13|25|57|43|20|-5|-19|-22|-26|-31|-34|-37|-45|-48|-54|-57|-61|-65|-71|-74|-78|-80|-86|-88|-89|-93|-95|-102|-103|-104|-108|-107|-115|-113|-115|-118|-117|-120|-123|-124|-120|-125|-125|-127|-126|-126|-123|-128|-126|-123|-118|-122|-117|-114|-108|-102|-99|-97|-95|-95|-94|-86|-84|-85|-82|-76|-73|-66|-60|-60|-52|-45|-41|-38|-32|-24|-24|-19|-12|2|-4|5|8|10|13|20|22|27|31|35|43|46|49|50|54|59|60|61|67|71|70|75|79|81|81|84|84|86|87|90|91|95|96|92|98|97|96|94|95|94|99|99|98|93|88|86|78|73|70|70|66|68|64|56|54|54|48|49|41|38|34|27|24|19|17|68|63|46|21|-4|-17|-22|-25|-26|-35|-42|-44|-46|-51|-55|-57|-65|-71|-71|-76|-79|-86|-88|-87|-94|-94|-101|-102|-104|-110|-109|-20|-20|-24|-24|-24|-24|-24|-23|-23|-20|-30|-27|-21|-24|-21|-23|-21|-22|-23|-21|-23|-20|-20|-24|-20|-22|-23|-20|-20|-20|-22|-25|-25|-23|-22|-25|-22|-22|-25|-26|-22|-24|-23|-25|-22|-16|-22|-23|-23|-22|-20|-22|-22|-21|-22|-22|-24|-21|-22|-21|-23|-22|-23|-24|-24|-25|-26|-22|-23|-21|-22|-23|-24|-23|-27|-23|-24|-23|-26|-22|-23|-25|-23|-22|-22|-23|-25|-25|-22|-24|-20|-32|-27|-22|-23|-23|-24|-22|-23|-24|-25|-19|-24|-23|-21|-22|-24|-20|-24|-22|-22|-22|-25|-23|-23|-25|-22|-23|-23|-20|-20|-25|-24|-25|-23|-20|-23|-21|-25|-25|-24|-27|-22|-22|-22|-25|-24|-22|-23|-22|-22|-24|-22|-20|-23|-23|-24|-21|-27|-24|-22|-24|-18|-23|-22|-22|-24|-22|-24|-24|-21|-24|-23|-23|-22|-22|-22|-20|-23|-24|-19|-28|-19|-20|-23|-23|-22|-28|-23|-23|-23|-22|-20|-20|-24|-23|-25|-20|-25|-24|-22|-24|-26|-21|-20|-22|-23|-23|-21|-25|-24|-22|-22|-24|-22|-22|-21|-26|-23|-21|-25|-22|-22|-20|-22|-24|-21|-25|-23|-21|-22|-22|-22|-22|-22|-23|-25|-22|-25|-22|-20|-25|-23|-23|-22|-23|-21|-22|-22|-23|-21|-22|-23|-24|-22|-22|-23|-22|-22|-26|-21|-23|-22|-21|-24|-21|-22|-23|-22|-21|-25|-22|-26|-25|-23|-23|-23|-21|-23|-21|-22|-20|-25|-22|-21|-24|-20|-21|-24|-23|-23|-21|-25|-24|-22|-20|-17|-20|-22|-22|-23|-22|-22|-24|-22|-24|-21|-28|-23|-24|-23|-21|-24|-20|-22|-21|-23|-22|-20|-21|-28|-24|-24|-22|-23|-23|-22|-22|-24|-21|-17|-22|-20|-23|-23|-23|-21|-21|-24|-23|-21|-27|-25|-24|-21|-21|-21|-24|-24|-22|-26|-28|-24|-27|-29|-27|-27|-24|-23|-25|-28|-24|-24|-24|-26|-28|-24|-28|-27|-24|-28|-28|-29|-28|-28|-28|-24|-26|-28|-26|-30|-28|-24|-26|-28|-28|-27|-28|-27|-26|-26|-27|-28|-26|-25|-27|-32|-32|-24|-27|-27|-27|-27|-28|-25|-28|-35|-30|-27|-28|-25|-23|-25|-25|-27|-26|-30|-30|-28|-25|-28|-26|-26|-26|-30|-31|-29|-25|-25|-24|-24|-27|-27|-27|-29|-26|-26|-23|-24|-23|-24|-22|-25|-26|-27|-25|-32|-29|-27|-28|-28|-24|-27|-30|-28|-23|-20|-25|-24|-26|-27|-23|-28|-25|-25|-25|-26|-26|-25|-27|-27|-29|-24|-27|-24|-23|-30|-29|-26|-28|-26|-26|-27|-26|-26|-26|-23|-29|-26|-24|-26|-24|-28|-28|-30|-23|-21|-26|-25|-26|-24|-24|-24|-27|-26|-26|-26|-25|-27|-27|-28|-26|-28|-29|-27|-24|-30|-28|-24|-30|-27|-28|-25|-30|-22|-22|-26|-27|-28|-27|-27|-28|-27|-27|-28|-26|-23|-25|-25|-26|-28|-27|-27|-27|-31|-29|-27|-27|-26|-29|-29|-27|-29|-26|-24|-25|-25|-29|-24|-25|-26|-24|-27|-24|-24|-27|-26|-26|-25|-26|-27|-26|-26|-24|-22|-30|-26|-23|-25|-23|-24|-26|-28|-26|-27|-28|-28|-27|-28|-28|-23|-26|-26|-30|-26|-24|-28|-26|-26|-27|-26|-27|-25|-25|-24|-23|-27|-28|-25|-25|-25|-26|-26|-26|-26|-24|-25|-25|-26|-28|-28|-23|-24|-29|-27|-24|-28|-27|-23|-28|-29|-27|-26|-26|-30|-25|-26|-25|-28|-24|-25|-28|-24|-24|-28|-24|-27|-25|-25|-27|-27|-30|-30|-25|-27|-28|-27|-28|-28|-25|-28|-26|-27|-29|-25|-26|-25|-23|-27|-26|-28|-26|-23|-28|-28|-26|-25|-26|-25|-27|-28|-27|-29|-24|-27|-29|-25|-27|-27|-28|\",\"phase\":\"00\",\"report_time\":\"2020-07-16 14:07:44\"}, {\"qrcode\":\"041906934543\",\"IIqrcode\":\"000000000021\",\"ao\":\"0\",\"seq\":\"00\",\"data\":\"89|84|85|81|75|65|67|67|65|59|56|55|55|52|47|44|38|35|30|22|20|18|8|3|-1|-7|-9|-17|-24|-28|-32|-32|-38|-43|-50|-51|-56|-59|-65|-68|-73|-79|-81|-85|-89|-94|-94|-100|-100|-102|-109|-111|-112|-114|-115|-119|-119|-123|-120|-124|-125|-132|-127|-131|-126|-129|-130|-131|-128|-130|-129|-128|-124|-124|-124|-120|-111|-109|-104|-101|-102|-97|-98|-94|-90|-87|-83|-81|-76|-72|-66|-65|-60|-53|-46|-41|-35|-28|-23|-20|-18|-12|-8|-5|1|7|10|14|18|21|24|31|38|40|43|46|50|51|59|58|61|62|70|70|72|77|78|80|81|85|84|87|90|91|88|92|89|90|91|91|91|93|89|93|92|91|87|78|73|71|68|64|64|61|56|53|49|43|43|41|39|32|27|26|23|17|7|2|-3|-9|-12|-12|-19|-26|-28|-31|-38|-45|-48|-53|-57|-63|-64|-73|-75|-79|-81|-83|-89|-91|-97|-98|-101|-104|-105|-112|-110|-115|-118|-122|-122|-118|-122|-123|-129|-125|-128|-125|-128|-129|-131|-129|-129|-128|-130|-128|-130|-126|-121|-118|-110|-104|-105|-107|-100|-100|-94|-90|-90|-84|-83|-78|-77|-74|-70|-64|-58|-51|-49|-44|-34|-30|-25|-22|-16|-12|-11|-7|-3|5|12|12|16|20|26|30|35|38|38|47|52|50|56|59|61|65|72|72|74|77|77|82|83|82|83|85|86|88|91|87|93|93|93|95|86|91|94|92|90|88|84|80|75|71|69|66|61|61|56|53|51|49|46|43|39|32|26|25|19|11|9|4|-4|-8|-14|-11|-23|-25|-30|-32|-37|-41|-50|-53|-55|-59|-63|-68|-73|-78|-80|-82|-88|-94|-93|-97|-96|-102|-109|-112|-24|-24|-22|-21|-24|-23|-25|-23|-30|-22|-22|-21|-22|-23|-24|-24|-23|-24|-23|-19|-25|-23|-24|-23|-22|-24|-23|-22|-22|-23|-26|-24|-21|-23|-22|-24|-24|-23|-22|-23|-20|-25|-24|-21|-24|-25|-24|-23|-27|-23|-25|-25|-24|-24|-23|-23|-22|-21|-24|-20|-25|-24|-22|-21|-26|-22|-20|-21|-23|-24|-24|-24|-25|-23|-28|-23|-20|-23|-25|-22|-22|-23|-24|-25|-22|-21|-25|-23|-25|-24|-23|-23|-26|-25|-27|-22|-23|-26|-25|-23|-26|-28|-25|-26|-23|-24|-21|-26|-25|-23|-24|-23|-24|-23|-26|-24|-24|-23|-22|-26|-23|-23|-21|-24|-28|-24|-24|-22|-24|-20|-27|-26|-26|-27|-25|-22|-22|-20|-28|-23|-25|-25|-24|-23|-23|-25|-23|-23|-24|-26|-22|-24|-26|-25|-23|-22|-25|-25|-24|-23|-25|-25|-27|-27|-24|-23|-26|-18|-22|-23|-24|-23|-26|-21|-21|-25|-23|-25|-22|-21|-25|-24|-24|-24|-22|-20|-22|-24|-19|-20|-24|-22|-24|-24|-25|-21|-24|-23|-22|-24|-25|-24|-23|-25|-25|-27|-23|-24|-23|-24|-25|-25|-22|-23|-27|-27|-24|-27|-23|-21|-24|-24|-23|-21|-25|-23|-21|-29|-24|-26|-24|-24|-26|-24|-22|-25|-27|-22|-25|-26|-26|-27|-24|-25|-22|-23|-25|-28|-22|-23|-25|-23|-24|-23|-25|-23|-24|-21|-25|-25|-22|-26|-26|-23|-23|-25|-26|-26|-26|-22|-25|-22|-24|-23|-24|-26|-18|-23|-25|-24|-22|-25|-24|-23|-23|-21|-24|-22|-23|-24|-22|-25|-21|-20|-23|-23|-23|-25|-26|-24|-23|-23|-25|-20|-23|-24|-23|-24|-26|-26|-23|-21|-23|-24|-21|-18|-24|-24|-25|-27|-27|-22|-26|-26|-23|-21|-24|-23|-22|-26|-22|-22|-23|-23|-25|-23|-24|-18|-24|-24|-27|-27|-28|-31|-26|-24|-30|-28|-27|-28|-27|-27|-26|-30|-26|-22|-31|-28|-27|-25|-28|-28|-28|-26|-22|-30|-26|-28|-27|-29|-27|-27|-28|-28|-24|-28|-29|-29|-27|-28|-29|-27|-27|-26|-29|-29|-25|-27|-26|-28|-27|-30|-28|-25|-25|-26|-28|-27|-28|-28|-29|-25|-30|-31|-26|-27|-28|-25|-28|-29|-27|-30|-28|-29|-27|-28|-27|-30|-26|-26|-25|-34|-29|-25|-24|-27|-26|-27|-28|-34|-28|-25|-25|-28|-28|-27|-25|-25|-26|-29|-35|-28|-29|-28|-25|-29|-29|-29|-29|-28|-29|-27|-28|-25|-27|-28|-29|-28|-25|-28|-32|-26|-25|-28|-26|-26|-26|-25|-24|-22|-28|-25|-28|-26|-25|-26|-29|-32|-31|-28|-26|-29|-27|-30|-27|-30|-30|-26|-28|-27|-26|-27|-25|-27|-27|-27|-29|-28|-30|-30|-27|-27|-28|-26|-31|-26|-26|-22|-29|-28|-31|-25|-25|-27|-30|-29|-27|-27|-28|-26|-29|-27|-28|-27|-28|-28|-26|-28|-27|-26|-27|-29|-26|-28|-25|-30|-30|-28|-26|-28|-24|-26|-27|-30|-25|-30|-25|-27|-28|-28|-27|-28|-28|-29|-30|-29|-30|-26|-27|-27|-27|-27|-29|-23|-30|-27|-28|-25|-27|-25|-28|-24|-29|-25|-22|-27|-28|-27|-27|-27|-28|-26|-24|-24|-24|-24|-25|-29|-34|-27|-26|-28|-27|-28|-29|-26|-26|-25|-25|-27|-27|-30|-25|-27|-29|-27|-29|-24|-25|-22|-24|-28|-28|-27|-25|-27|-29|-30|-26|-26|-29|-28|-28|-27|-28|-26|-27|-26|-25|-24|-27|-31|-30|-27|-25|-26|-28|-25|-26|-27|-26|-35|-27|-27|-27|-27|-30|-27|-27|-28|-26|-27|-27|-27|-26|-26|-27|-29|-28|-26|-30|-29|-26|-29|-27|-26|-26|-28|-27|-28|-29|-27|-30|-27|-29|-28|-27|-27|-27|-27|\",\"phase\":\"00\",\"report_time\":\"2020-07-16 14:07:44\"}, {\"qrcode\":\"190620833398\",\"IIqrcode\":\"000000000021\",\"ao\":\"0\",\"seq\":\"00\",\"data\":\"91|89|78|77|72|68|64|67|65|61|53|56|48|48|45|42|36|30|29|24|22|14|7|2|-3|-8|-12|-14|-23|-27|-32|-35|-36|-40|-51|-54|-60|-63|-67|-72|-75|-79|-83|-86|-83|-94|-95|-96|-103|-106|-108|-111|-114|-118|-115|-118|-116|-122|-121|-127|-126|-127|-131|-131|-129|-126|-132|-132|-127|-131|-129|-131|-128|-127|-124|-117|-107|-105|-106|-105|-102|-99|-96|-91|-90|-87|-83|-80|-74|-72|-64|-63|-57|-50|-47|-41|-38|-29|-24|-20|-14|-10|-9|-4|2|7|15|19|19|21|31|33|38|37|44|47|51|57|53|62|61|64|70|74|77|82|80|82|76|82|83|84|87|89|94|93|92|95|92|91|91|92|90|90|89|85|81|74|68|68|69|64|62|62|61|53|53|46|42|41|35|30|27|21|16|9|13|5|2|-1|-12|-18|-26|-26|-30|-35|-42|-44|-51|-54|-59|-63|-65|-68|-77|-83|-87|-88|-96|-96|-95|-99|-97|-107|-106|-111|-116|-116|-118|-117|-122|-120|-123|-123|-129|-128|-131|-129|-133|-131|-130|-128|-131|-129|-132|-126|-129|-122|-121|-115|-109|-105|-104|-100|-101|-100|-95|-94|-89|-85|-82|-81|-75|-69|-67|-61|-58|-49|-43|-39|-33|-29|-24|-24|-11|-10|-7|-3|5|7|11|19|22|27|28|35|37|43|49|53|51|54|60|58|61|68|69|74|75|79|80|82|81|86|87|89|90|88|90|89|90|90|88|91|91|92|89|90|87|87|84|81|70|66|66|65|63|57|58|53|49|48|44|41|34|30|27|21|16|13|6|2|-4|-10|-17|-20|-26|-26|-32|-38|-41|-47|-53|-57|-59|-62|-70|-74|-76|-83|-88|-89|-90|-94|-96|-100|-100|-104|-109|-108|-21|-26|-22|-26|-24|-23|-24|-23|-24|-23|-22|-24|-28|-24|-30|-25|-22|-25|-23|-21|-21|-24|-23|-23|-21|-24|-23|-22|-21|-22|-25|-22|-25|-22|-25|-21|-25|-25|-23|-22|-22|-23|-26|-23|-24|-22|-21|-23|-24|-25|-25|-21|-23|-23|-22|-23|-23|-24|-20|-25|-19|-21|-20|-26|-23|-21|-22|-24|-23|-25|-25|-23|-24|-24|-24|-26|-21|-23|-26|-25|-23|-19|-23|-23|-24|-22|-24|-24|-23|-25|-25|-22|-19|-23|-25|-20|-22|-18|-23|-24|-26|-22|-26|-21|-25|-25|-23|-22|-23|-27|-24|-24|-23|-31|-27|-24|-24|-25|-24|-24|-25|-26|-26|-29|-25|-24|-25|-24|-23|-25|-24|-23|-23|-23|-24|-20|-23|-26|-25|-25|-25|-23|-23|-24|-22|-26|-22|-21|-22|-23|-21|-25|-22|-21|-25|-24|-27|-24|-25|-22|-24|-24|-20|-23|-22|-23|-21|-21|-25|-21|-25|-20|-25|-25|-23|-20|-25|-23|-26|-24|-21|-21|-24|-25|-25|-24|-22|-23|-23|-22|-20|-20|-23|-21|-23|-23|-22|-24|-22|-24|-26|-22|-25|-24|-24|-25|-25|-24|-23|-23|-23|-24|-21|-21|-25|-23|-22|-26|-24|-21|-24|-22|-22|-18|-21|-27|-22|-25|-26|-25|-25|-25|-27|-24|-23|-23|-23|-24|-24|-23|-24|-23|-26|-22|-20|-24|-23|-23|-24|-24|-23|-25|-25|-24|-22|-30|-26|-22|-23|-23|-23|-24|-23|-26|-25|-25|-24|-24|-22|-24|-24|-27|-28|-23|-25|-21|-24|-21|-25|-21|-20|-23|-29|-24|-23|-25|-24|-25|-27|-23|-24|-23|-24|-24|-23|-23|-21|-21|-20|-19|-22|-25|-27|-24|-24|-26|-24|-25|-23|-22|-21|-21|-24|-23|-22|-23|-24|-25|-25|-24|-25|-24|-21|-22|-25|-24|-22|-20|-24|-22|-23|-25|-23|-23|-23|-24|-24|-26|-25|-23|-28|-25|-26|-24|-29|-26|-26|-28|-28|-29|-26|-29|-26|-28|-25|-20|-29|-27|-26|-26|-29|-26|-30|-24|-27|-26|-25|-25|-29|-28|-28|-33|-29|-25|-23|-26|-25|-26|-28|-28|-27|-29|-27|-24|-24|-27|-30|-28|-28|-27|-27|-27|-28|-27|-25|-27|-31|-26|-26|-26|-27|-29|-26|-27|-25|-27|-29|-27|-27|-26|-29|-25|-27|-26|-26|-27|-28|-29|-27|-28|-27|-29|-29|-26|-28|-26|-25|-27|-26|-30|-29|-23|-24|-25|-26|-27|-23|-24|-24|-31|-29|-27|-27|-27|-27|-30|-28|-29|-27|-25|-29|-28|-26|-25|-30|-32|-28|-27|-25|-25|-32|-28|-26|-26|-27|-29|-27|-26|-28|-29|-29|-26|-25|-27|-29|-26|-28|-25|-27|-34|-26|-25|-27|-26|-26|-25|-28|-26|-24|-25|-24|-25|-27|-28|-29|-25|-27|-29|-27|-28|-25|-27|-29|-28|-26|-28|-27|-28|-27|-28|-25|-26|-29|-28|-26|-26|-26|-28|-28|-27|-26|-29|-28|-27|-27|-28|-29|-29|-30|-28|-26|-28|-29|-26|-26|-28|-28|-28|-25|-29|-28|-25|-26|-27|-29|-26|-28|-26|-28|-27|-26|-28|-25|-28|-25|-35|-30|-26|-28|-26|-28|-29|-26|-29|-29|-30|-24|-25|-26|-31|-27|-27|-25|-27|-22|-31|-23|-25|-27|-27|-29|-28|-28|-23|-27|-26|-26|-25|-26|-26|-29|-27|-26|-25|-29|-27|-27|-27|-30|-27|-29|-26|-26|-32|-27|-25|-27|-28|-28|-25|-28|-30|-24|-24|-25|-29|-30|-25|-27|-26|-27|-23|-22|-30|-27|-28|-29|-28|-28|-27|-27|-29|-26|-26|-29|-26|-27|-26|-27|-28|-26|-28|-29|-28|-26|-28|-29|-29|-27|-27|-25|-25|-27|-29|-28|-28|-28|-29|-26|-25|-28|-29|-27|-27|-27|-27|-27|-28|-28|-26|-24|-26|-27|-26|-26|-29|-26|-27|-24|-25|\",\"phase\":\"00\",\"report_time\":\"2020-07-16 14:07:44\"}, {\"qrcode\":\"190620833400\",\"IIqrcode\":\"000000000003\",\"ao\":\"0\",\"seq\":\"00\",\"data\":\"91|83|79|74|72|70|71|71|61|59|56|53|52|48|42|39|37|24|24|23|16|10|5|-3|-9|-13|-16|-21|-21|-25|-33|-35|-42|-47|-51|-56|-61|-60|-71|-75|-78|-82|-84|-84|-92|-96|-93|-98|-101|-103|-109|-107|-116|-113|-117|-113|-120|-120|-122|-127|-123|-125|-124|-130|-123|-130|-126|-125|-121|-127|-124|-121|-117|-115|-107|-101|-103|-98|-101|-97|-90|-85|-83|-82|-79|-75|-72|-70|-59|-56|-55|-49|-43|-37|-35|-26|-21|-17|-11|-9|-5|-4|4|9|13|19|21|28|30|33|37|45|47|52|55|58|62|63|68|69|69|77|78|81|86|82|86|88|89|89|92|96|95|94|93|97|97|96|97|97|97|94|94|92|89|86|80|80|71|71|70|67|62|61|58|53|49|47|43|40|29|27|27|22|16|10|5|1|-5|-13|-17|-20|-24|-21|-28|-36|-39|-46|-51|-54|-58|-63|-69|-71|-74|-79|-85|-85|-88|-95|-94|-98|-101|-106|-110|-107|-114|-112|-114|-115|-118|-117|-119|-123|-122|-125|-123|-127|-124|-125|-123|-125|-122|-128|-127|-124|-120|-116|-113|-103|-101|-95|-96|-93|-92|-88|-87|-84|-83|-78|-72|-69|-63|-64|-52|-52|-45|-40|-31|-27|-23|-16|-12|-7|-6|-1|2|8|12|17|22|26|31|31|39|41|46|54|54|57|62|66|68|68|73|80|80|81|89|88|86|89|90|91|92|92|94|99|94|96|94|97|95|95|96|96|96|95|90|88|83|77|71|69|69|66|59|59|57|52|51|48|47|38|35|29|27|23|14|10|7|0|-7|-15|-15|-21|-24|-27|-30|-37|-42|-48|-51|-56|-56|-61|-68|-72|-80|-79|-84|-90|-89|-90|-93|-97|-102|-101|-108|-107|-24|-22|-22|-22|-22|-25|-26|-24|-26|-24|-23|-22|-23|-22|-23|-25|-24|-26|-22|-23|-25|-24|-23|-22|-19|-21|-23|-24|-24|-14|-22|-20|-24|-24|-21|-17|-23|-25|-22|-25|-30|-23|-23|-21|-22|-21|-22|-25|-23|-23|-23|-20|-15|-25|-21|-21|-24|-23|-21|-25|-26|-22|-20|-22|-24|-21|-24|-22|-24|-15|49|38|22|0|-23|-25|-24|-25|-24|-22|-23|-24|-26|-24|-24|-23|-22|-24|-24|-24|-22|-24|-22|-24|-21|-30|-27|-23|-22|-22|-23|-22|-22|-25|-23|-23|-25|-23|-25|-24|-23|-23|-23|-20|-22|-21|-22|-22|-24|-21|-24|-25|-24|-22|-21|-22|-22|-20|-24|-26|-23|-24|-21|-22|-23|-24|-22|-23|-25|-22|-16|-23|-23|-26|-24|-19|-17|-24|-24|-22|-22|-20|-22|-22|-23|-24|-24|-23|-22|-23|-22|-24|-21|-17|-22|-24|-23|-23|-21|-23|-22|-23|-26|-20|-20|-25|-23|-25|-20|-23|-22|-24|-22|-22|-22|-20|-18|-24|-22|-22|-23|-23|-23|-23|-24|-25|-28|-26|-23|-22|-20|-23|-23|-23|-25|-24|-25|-25|-18|-24|-24|-24|-21|21|55|41|22|0|-18|-29|-21|-25|-23|-24|-21|-24|-25|-23|-24|-23|-25|-26|-22|-24|-23|-23|-25|-24|-24|-23|-22|-25|-22|-22|-23|-22|-25|-22|-24|-25|-27|-21|-25|-27|-23|-22|-24|-26|-25|-25|-23|-25|-25|-22|-25|-23|-24|-23|-24|-22|-25|-22|-27|-23|-23|-25|-21|-24|-23|-26|-24|-26|-25|-25|-24|-21|-23|-20|-25|-25|-23|-22|-22|-21|-24|-24|-26|-23|-25|-22|-23|-23|-27|-21|-26|-21|-23|-23|-27|-23|-21|-24|-23|-26|-25|-25|-24|-22|-20|-18|-21|-21|-20|-21|-23|-20|-23|-25|-23|-24|-19|-20|-23|-22|-23|-25|-23|-26|-24|-22|-25|-27|-26|-25|-26|-27|-23|-27|-27|-28|-26|-28|-27|-27|-25|-27|-29|-29|-27|-28|-26|-26|-28|-25|-27|-27|-27|-27|-27|-26|-27|-26|-26|-25|-29|-26|-28|-28|-26|-27|-29|-31|-26|-27|-28|-29|-29|-30|-28|-29|-27|-25|-32|-29|-25|-29|-26|-30|-27|-28|-30|-27|-28|-28|-25|-27|-27|-27|-27|-27|-29|-24|-24|-25|-25|-27|-25|-26|-24|-27|-27|-28|-31|-26|-28|-26|-23|-26|-25|-25|-26|-25|-27|-29|-25|-27|-27|-27|-28|-25|-30|-23|-22|-28|-27|-27|-26|-26|-27|-25|-27|-30|-30|-27|-27|-26|-26|-27|-26|-26|-28|-28|-26|-24|-24|-27|-27|-25|-27|-28|-28|-25|-27|-24|-25|-25|-27|-27|-28|-26|-25|-34|-31|-27|-25|-25|-28|-26|-29|-28|-25|-27|-29|-28|-29|-29|-29|-26|-26|-24|-24|-23|-27|-24|-25|-27|-26|-27|-26|-25|-26|-27|-24|-27|-27|-29|-28|-27|-27|-25|-25|-29|-29|-26|-28|-25|-28|-26|-26|-31|-27|-26|-26|-28|-28|-26|-27|-26|-24|-24|-28|-27|-25|-28|-26|-28|-25|-28|-27|-27|-25|-25|-26|-20|-25|-25|-25|-26|-24|-27|-26|-26|-27|-24|-27|-28|-28|-25|-23|-24|-23|-26|-24|-26|-27|-28|-27|-30|-25|-22|-26|-27|-23|-23|-27|-25|-25|-26|-25|-24|-25|-27|-27|-24|-27|-28|-27|-29|-27|-26|-25|-25|-25|-27|-26|-24|-28|-27|-27|-26|-26|-25|-26|-30|-27|-27|-27|-26|-30|-26|-25|-24|-26|-30|-27|-27|-26|-26|-25|-27|-26|-29|-29|-26|-27|-27|-30|-25|-24|-25|-29|-29|-23|-26|-26|-27|-24|-29|-28|-29|-29|-25|-28|-29|-27|-28|-25|-23|-29|-26|-27|-27|-27|-25|-26|-25|-30|-27|-24|-26|-26|-22|-29|-26|-25|-25|-26|-27|-25|-27|\",\"phase\":\"00\",\"report_time\":\"2020-07-16 14:07:44\"}, {\"qrcode\":\"190620833400\",\"IIqrcode\":\"000000000021\",\"ao\":\"0\",\"seq\":\"00\",\"data\":\"86|82|78|75|68|67|67|66|61|58|52|51|48|45|40|37|31|28|23|22|14|10|5|-1|-9|-16|-26|-20|-24|-30|-34|-41|-42|-49|-56|-57|-61|-67|-75|-71|-79|-82|-85|-90|-91|-94|-100|-102|-106|-110|-108|-118|-119|-117|-117|-122|-124|-123|-124|-123|-129|-128|-131|-129|-129|-130|-128|-128|-130|-129|-128|-129|-126|-123|-115|-112|-108|-105|-104|-101|-101|-99|-91|-89|-84|-86|-81|-73|-69|-65|-62|-55|-52|-51|-44|-35|-32|-23|-23|-11|-12|-8|-4|1|5|14|16|22|23|28|32|37|41|44|48|54|57|57|64|62|67|70|72|75|77|79|80|82|86|85|87|92|89|90|94|94|91|94|94|93|93|87|90|86|89|85|79|73|67|70|68|63|60|59|58|49|50|47|42|39|34|28|24|19|15|9|5|-1|-7|-11|-18|-20|-26|-29|-38|-40|-45|-49|-55|-59|-64|-68|-70|-73|-75|-82|-84|-91|-92|-95|-97|-101|-102|-106|-112|-115|-115|-116|-120|-118|-122|-123|-125|-129|-129|-126|-126|-130|-130|-127|-128|-124|-130|-133|-134|-132|-127|-124|-119|-113|-104|-108|-102|-103|-100|-95|-96|-88|-86|-83|-79|-75|-71|-61|-61|-60|-53|-48|-41|-35|-32|-24|-19|-16|-15|-10|-6|2|5|11|15|21|23|25|30|35|38|44|48|53|55|52|60|65|68|68|70|74|77|79|78|85|85|85|90|90|86|87|88|92|89|88|91|89|89|90|94|90|91|89|83|79|71|63|64|65|62|57|55|52|47|46|41|34|33|26|23|24|14|10|7|-2|-10|-13|-16|-21|-23|-26|-35|-38|-44|-46|-54|-58|-61|-68|-72|-76|-81|-81|-87|-92|-95|-95|-97|-98|-103|-104|-109|-114|-26|-25|-24|-24|-24|-24|-25|-23|-25|-26|-25|-27|-25|-25|-23|-25|-26|-25|-26|-22|-26|-23|-21|-24|-25|-26|-25|-26|-26|-26|-27|-23|-25|-25|-26|-22|-23|-24|-23|-26|-23|-25|-26|-22|-25|-23|-23|-24|-21|-24|-22|-27|-22|-27|-25|-24|-25|-26|-27|-28|-26|-25|-27|-25|-25|-26|-25|-20|-24|-24|0|47|37|15|-11|-22|-26|-23|-22|-24|-23|-27|-24|-25|-22|-21|-28|-27|-24|-25|-29|-21|-22|-24|-26|-26|-27|-25|-27|-27|-25|-27|-27|-26|-27|-23|-23|-23|-24|-26|-26|-22|-22|-26|-25|-23|-23|-25|-26|-24|-25|-27|-26|-25|-25|-26|-26|-22|-24|-26|-25|-26|-24|-27|-28|-24|-27|-25|-28|-24|-23|-25|-24|-25|-23|-24|-26|-23|-27|-28|-23|-24|-26|-29|-28|-23|-26|-24|-22|-23|-27|-26|-24|-23|-27|-26|-24|-23|-23|-24|-24|-24|-23|-25|-28|-26|-25|-24|-27|-25|-25|-25|-25|-26|-25|-23|-26|-24|-24|-24|-23|-25|-25|-24|-24|-23|-23|-27|-27|-26|-26|-24|-24|-24|-25|-23|-24|-25|-23|-24|-24|-23|-23|-24|38|51|38|16|-9|-24|-26|-26|-22|-25|-21|-26|-22|-30|-27|-24|-24|-25|-26|-26|-25|-24|-23|-24|-22|-26|-24|-26|-23|-26|-26|-25|-26|-27|-23|-27|-24|-25|-25|-26|-26|-26|-25|-26|-22|-28|-24|-26|-25|-21|-22|-24|-24|-26|-24|-25|-27|-26|-23|-24|-25|-23|-23|-22|-24|-26|-27|-25|-25|-25|-25|-24|-24|-24|-25|-22|-31|-27|-23|-22|-24|-26|-26|-26|-23|-26|-29|-26|-25|-23|-23|-23|-25|-25|-26|-23|-25|-26|-21|-24|-26|-26|-24|-24|-28|-23|-27|-22|-24|-26|-26|-26|-24|-23|-22|-24|-26|-23|-24|-26|-23|-27|-24|-25|-26|-25|-28|-29|-29|-27|-28|-28|-25|-29|-29|-29|-27|-28|-29|-25|-25|-29|-26|-24|-25|-27|-28|-27|-25|-24|-27|-25|-25|-30|-29|-25|-28|-26|-28|-28|-28|-25|-24|-26|-27|-27|-27|-27|-27|-28|-27|-27|-27|-27|-28|-26|-29|-27|-27|-25|-25|-29|-24|-30|-29|-28|-27|-28|-32|-26|-24|-27|-31|-27|-26|-29|-27|-29|-27|-24|-30|-26|-28|-28|-27|-26|-25|-28|-25|-25|-29|-27|-27|-28|-28|-25|-26|-24|-30|-32|-27|-26|-27|-28|-27|-27|-30|-26|-25|-30|-27|-25|-28|-27|-25|-28|-29|-24|-30|-24|-27|-25|-26|-24|-28|-28|-24|-27|-26|-28|-27|-26|-26|-28|-29|-28|-29|-31|-26|-29|-29|-26|-25|-27|-28|-25|-33|-31|-28|-29|-27|-31|-28|-27|-30|-28|-29|-28|-27|-25|-28|-27|-25|-28|-28|-33|-31|-29|-28|-30|-28|-26|-29|-28|-30|-32|-27|-29|-30|-29|-29|-26|-28|-25|-31|-31|-27|-28|-27|-29|-28|-28|-24|-21|-28|-28|-25|-25|-26|-26|-26|-29|-25|-27|-31|-28|-30|-29|-29|-28|-28|-26|-26|-27|-27|-26|-26|-29|-27|-28|-27|-27|-31|-28|-30|-28|-30|-27|-26|-30|-30|-28|-28|-26|-23|-27|-29|-27|-26|-30|-28|-25|-27|-24|-26|-27|-28|-27|-26|-27|-28|-25|-23|-29|-31|-29|-26|-27|-27|-26|-32|-32|-29|-27|-25|-26|-27|-29|-29|-26|-26|-26|-25|-24|-28|-26|-28|-28|-28|-33|-29|-30|-24|-26|-29|-26|-25|-29|-24|-26|-27|-28|-28|-27|-29|-25|-29|-24|-30|-27|-24|-28|-28|-31|-27|-27|-23|-26|-22|-28|-26|-28|-28|-28|-26|-30|-29|-26|-27|-25|-27|-28|-33|-27|-29|-31|-26|-24|-26|-28|-27|-27|-25|-29|-28|-28|-26|-31|-30|-26|-30|-29|-29|-30|-28|-30|\",\"phase\":\"00\",\"report_time\":\"2020-07-16 14:07:44\"}, {\"qrcode\":\"190620833397\",\"IIqrcode\":\"000000000003\",\"ao\":\"0\",\"seq\":\"00\",\"data\":\"91|90|87|78|72|70|67|65|65|61|62|52|52|50|48|42|38|32|26|23|17|14|6|-1|-5|-12|-17|-16|-23|-29|-29|-34|-43|-46|-49|-53|-56|-60|-65|-72|-77|-82|-83|-87|-87|-90|-95|-98|-100|-106|-107|-110|-113|-113|-113|-115|-116|-116|-117|-123|-124|-124|-124|-122|-124|-122|-126|-124|-127|-120|-122|-123|-119|-113|-110|-104|-100|-101|-102|-99|-96|-89|-85|-80|-79|-78|-72|-67|-63|-61|-59|-53|-49|-41|-34|-29|-23|-13|-13|-11|-6|-2|1|8|13|16|26|25|30|35|41|43|45|53|54|55|63|69|66|67|75|75|78|82|82|85|86|85|89|91|93|96|96|94|95|95|98|99|97|94|97|96|97|93|92|87|79|73|69|70|68|70|67|58|55|54|53|52|48|38|34|30|24|23|18|13|7|-2|-7|-9|-17|-19|-23|-25|-33|-37|-41|-47|-47|-55|-59|-63|-68|-68|-76|-81|-81|-86|-90|-92|-96|-100|-101|-105|-107|-111|-110|-110|-115|-116|-118|-114|-119|-118|-123|-125|-124|-124|-127|-124|-126|-123|-126|-125|-124|-122|-122|-116|-112|-108|-103|-100|-100|-98|-92|-88|-85|-82|-78|-75|-68|-62|-62|-55|-49|-46|-43|-32|-27|-22|-17|-15|-11|-6|-1|0|5|11|18|22|26|30|36|36|40|46|51|56|58|58|64|67|71|75|77|79|81|82|85|86|85|88|86|92|94|95|94|95|98|98|98|94|98|101|95|99|93|92|88|81|76|70|70|68|67|64|64|54|54|54|54|45|37|34|31|30|24|21|11|5|0|-2|-5|-20|-15|-19|-26|-28|-34|-40|-48|-50|-53|-57|-59|-67|-71|-76|-78|-86|-85|-92|-89|-94|-97|-102|-105|-108|-109|-112|-23|-22|-23|-23|-22|-22|-23|-24|-22|-28|-22|-21|-22|-23|-23|-27|-23|-23|-21|-24|-26|-23|-23|-23|-22|-23|-23|-24|-23|-21|-24|-21|-26|-20|-24|-24|-20|-23|-16|-24|-22|-23|-25|-25|-25|-25|-23|-24|-24|-23|-24|-20|-22|-22|-25|-23|-22|-20|-21|-22|-23|-19|-23|-21|-22|-23|-21|-23|-25|-23|-24|-20|-22|-24|-22|-22|-22|-22|-25|-21|-21|-23|-21|-22|-24|-25|-22|-23|-21|-18|-16|-22|-24|-25|-26|-16|-25|-24|-21|-26|-28|-25|-25|-22|-24|-21|-24|-25|-23|-22|-25|-23|-26|-28|-22|-23|-21|-20|-22|-22|-24|-27|-23|-25|-21|-19|-23|-20|-22|-17|-21|-21|-22|-23|-20|-28|-25|-22|-22|-22|-22|-23|-23|-23|-23|-23|-23|-22|-23|-23|-24|-21|-24|-23|-22|-20|-23|-21|-20|-23|-21|-24|-25|-24|-23|-23|-22|-21|-23|-19|-18|-22|-21|-23|-22|-24|-24|-26|-23|-24|-21|-22|-21|-22|-23|-23|-21|-21|-23|-22|-23|-24|-26|-23|-24|-23|-23|-25|-23|-22|-24|-23|-23|-23|-18|-22|-22|-24|-23|-24|-24|-22|-21|-22|-20|-20|-25|-21|-23|-24|-24|-21|-20|-23|-22|-20|-22|-20|-22|-22|-23|-22|-23|-21|-22|-23|-23|-19|-24|-26|-25|-25|-26|-23|-24|-23|-24|-22|-15|-26|-22|-24|-23|-22|-23|-22|-22|-25|-24|-21|-27|-25|-24|-22|-21|-22|-21|-20|-23|-19|-24|-23|-22|-23|-23|-22|-26|-23|-21|-23|-23|-21|-22|-23|-23|-22|-23|-23|-23|-23|-23|-23|-20|-17|-21|-21|-25|-25|-24|-24|-24|-25|-22|-22|-27|-24|-19|-21|-22|-22|-21|-21|-23|-21|-22|-20|-21|-21|-21|-21|-22|-24|-20|-22|-25|-24|-24|-21|-28|-23|-22|-22|-23|-22|-25|-19|-22|-22|-19|-23|-27|-29|-27|-25|-27|-27|-26|-31|-28|-27|-27|-28|-29|-27|-25|-29|-24|-22|-29|-28|-29|-28|-27|-27|-31|-29|-23|-30|-26|-27|-28|-24|-28|-28|-28|-31|-28|-26|-29|-29|-23|-25|-27|-28|-27|-26|-27|-28|-28|-28|-26|-27|-26|-24|-26|-27|-25|-29|-27|-20|-29|-30|-30|-26|-27|-29|-28|-28|-26|-25|-27|-28|-30|-28|-30|-26|-25|-24|-26|-29|-26|-26|-24|-25|-23|-22|-25|-25|-28|-23|-29|-25|-25|-25|-27|-26|-26|-27|-30|-27|-27|-30|-25|-29|-29|-27|-29|-27|-28|-28|-25|-27|-25|-25|-27|-27|-28|-24|-28|-27|-25|-8|-23|-29|-24|-26|-27|-28|-26|-25|-28|-28|-26|-27|-29|-27|-29|-25|-28|-31|-30|-29|-35|-33|-28|-25|-28|-27|-25|-28|-26|-27|-28|-29|-28|-28|-27|-29|-26|-28|-33|-30|-28|-27|-25|-29|-26|-29|-29|-27|-26|-30|-29|-26|-28|-27|-26|-25|-29|-30|-29|-26|-28|-28|-32|-28|-29|-30|-30|-26|-24|-31|-27|-26|-27|-28|-29|-25|-23|-27|-26|-27|-24|-26|-25|-26|-29|-26|-26|-26|-31|-29|-23|-27|-29|-24|-25|-27|-28|-28|-26|-27|-28|-29|-28|-30|-24|-26|-23|-23|-22|-23|-24|-24|-31|-27|-27|-27|-23|-23|-26|-27|-27|-23|-24|-27|-26|-26|-25|-24|-29|-29|-26|-26|-27|-28|-27|-35|-32|-27|-7|53|42|19|0|-24|-25|-28|-26|-26|-26|-27|-27|-27|-28|-28|-26|-28|-24|-27|-27|-24|-27|-27|-30|-27|-28|-27|-27|-25|-26|-26|-25|-28|-26|-28|-29|-25|-28|-26|-27|-28|-27|-28|-29|-28|-29|-26|-24|-29|-27|-28|-30|-25|-27|-32|-25|-27|-27|-28|-26|-31|-28|-23|-27|-27|-28|-28|-28|-27|-27|-29|-26|-28|-27|-28|-28|-26|-31|-25|\",\"phase\":\"00\",\"report_time\":\"2020-07-16 14:07:44\"}, {\"qrcode\":\"190620833397\",\"IIqrcode\":\"000000000021\",\"ao\":\"0\",\"seq\":\"00\",\"data\":\"91|84|79|72|71|71|66|67|62|60|54|51|48|49|45|38|32|27|24|21|20|11|3|-1|-10|-10|-18|-21|-25|-31|-33|-39|-38|-45|-51|-55|-59|-62|-66|-74|-79|-83|-81|-90|-93|-94|-98|-97|-101|-108|-110|-115|-112|-116|-114|-121|-121|-122|-121|-123|-125|-130|-131|-128|-131|-131|-131|-130|-130|-128|-132|-128|-128|-124|-123|-115|-111|-104|-107|-104|-102|-98|-95|-93|-88|-83|-82|-75|-72|-65|-63|-60|-56|-50|-44|-39|-30|-23|-22|-18|-15|-10|-5|-2|7|10|14|18|21|25|29|34|42|43|48|51|53|53|59|61|68|65|71|77|79|80|80|84|82|84|83|84|87|90|91|94|88|91|91|92|93|93|91|88|90|83|82|76|66|68|65|61|60|61|56|52|53|47|46|40|34|26|23|21|17|12|5|0|-7|-12|-19|-20|-25|-29|-33|-33|-43|-45|-52|-58|-61|-65|-70|-75|-79|-83|-85|-89|-91|-92|-98|-104|-102|-105|-107|-110|-114|-116|-121|-117|-123|-118|-127|-125|-127|-128|-128|-126|-130|-128|-134|-130|-130|-128|-130|-127|-133|-125|-122|-114|-108|-107|-102|-102|-99|-95|-93|-89|-88|-83|-80|-78|-72|-67|-63|-62|-57|-49|-46|-39|-34|-27|-23|-17|-12|-13|-7|-1|1|7|13|17|21|24|32|36|39|42|48|49|54|54|62|65|64|69|72|69|75|82|81|81|84|87|86|86|90|88|93|92|94|92|92|93|89|89|92|91|87|86|78|76|70|67|66|64|62|55|54|54|48|47|43|40|32|31|27|24|19|13|5|-1|-7|-10|-16|-19|-25|-25|-32|-32|-42|-49|-52|-55|-63|-67|-67|-75|-77|-82|-87|-87|-91|-96|-94|-101|-103|-101|-108|-116|-22|-22|-23|-23|-27|-21|-23|-22|-23|-23|-23|-22|-26|-20|-18|-23|-21|-24|-23|-25|-26|-21|-22|-24|-22|-25|-25|-23|-25|-24|-22|-22|-22|-23|-24|-24|-21|-22|-30|-23|-22|-23|-22|-24|-24|-25|-22|-25|-23|-20|-25|-21|-25|-21|-24|-22|-26|-21|-21|-21|-24|-28|-26|-23|-24|-24|-27|-23|-24|-24|-24|-23|-19|-25|-25|-25|-22|-25|-23|-24|-23|-23|-28|-28|-25|-23|-21|-22|-27|-24|-21|-24|-27|-20|-25|-26|-24|-26|-25|-21|-23|-24|-24|-25|-23|-25|-28|-23|-23|-25|-25|-24|-20|-21|-26|-24|-26|-26|-27|-25|-26|-26|-25|-24|-25|-26|-28|-25|-25|-24|-22|-23|-21|-22|-22|-23|-23|-27|-21|-26|-24|-24|-24|-26|-24|-24|-25|-24|-24|-17|-24|-24|-24|-24|-23|-24|-24|-24|-22|-25|-22|-23|-25|-25|-22|-24|-21|-23|-25|-22|-23|-24|-21|-25|-22|-21|-23|-23|-25|-23|-25|-24|-24|-25|-23|-23|-23|-24|-27|-26|-23|-23|-25|-24|-23|-22|-24|-23|-25|-22|-22|-26|-20|-25|-25|-21|-24|-23|-25|-23|-25|-24|-27|-26|-30|-24|-23|-24|-21|-23|-23|-24|-22|-23|-25|-27|-24|-24|-25|-25|-26|-26|-26|-23|-24|-24|-23|-25|-22|-24|-24|-26|-22|-24|-22|-23|-21|-28|-26|-23|-25|-24|-24|-22|-24|-25|-25|-23|-23|-25|-24|-23|-23|-21|-23|-27|-24|-23|-23|-25|-24|-25|-25|-22|-25|-25|-23|-23|-23|-24|-19|-22|-22|-26|-25|-18|-25|-24|-25|-26|-23|-21|-26|-23|-25|-25|-23|-22|-23|-23|-24|-27|-25|-24|-25|-24|-24|-24|-21|-21|-23|-24|-23|-25|-25|-22|-23|-24|-27|-25|-23|-26|-25|-20|-21|-23|-23|-26|-27|-24|-23|-24|-24|-21|-22|-23|-23|-25|-22|-23|-25|-30|-29|-26|-28|-29|-30|-26|-26|-30|-27|-28|-29|-30|-29|-28|-28|-28|-29|-29|-27|-29|-30|-31|-30|-28|-26|-27|-30|-31|-28|-28|-27|-26|-30|-24|-26|-25|-30|-27|-26|-29|-28|-28|-27|-31|-28|-29|-28|-28|-29|-28|-28|-25|-27|-29|-30|-24|-31|-28|-28|-30|-28|-30|-32|-28|-29|-28|-29|-27|-28|-29|-30|-28|-26|-25|-25|-26|-25|-29|-29|-24|-20|-28|-28|-29|-27|-26|-28|-27|-30|-26|-31|-27|-26|-27|-29|-28|-28|-27|-28|-26|-25|-29|-26|-31|-28|-29|-25|-27|-29|-29|-27|-27|-27|-26|-27|-29|36|53|40|19|-9|-27|-28|-29|-31|-28|-29|-34|-29|-27|-26|-29|-29|-28|-28|-28|-34|-27|-28|-31|-29|-29|-29|-28|-28|-30|-29|-28|-29|-30|-28|-29|-28|-24|-33|-28|-29|-30|-28|-28|-27|-31|-25|-29|-29|-30|-26|-31|-28|-27|-27|-31|-31|-29|-28|-29|-29|-26|-29|-28|-28|-29|-26|-27|-30|-27|-30|-28|-27|-25|-30|-32|-27|-27|-29|-24|-27|-30|-30|-26|-24|-26|-29|-29|-27|-28|-29|-28|-24|-21|-29|-29|-28|-32|-28|-28|-28|-30|-33|-31|-26|-27|-27|-26|-27|-29|-28|-27|-31|-28|-28|-30|-27|-30|-26|-28|-26|-26|-31|-27|-29|-30|-28|-28|-28|-25|-33|-31|-30|-26|-28|-28|-26|-29|-26|-31|-27|-28|-26|-30|-12|50|43|14|-8|-27|-27|-28|-27|-29|-26|-31|-27|-26|-27|-27|-25|-27|-28|-29|-26|-26|-27|-30|-28|-30|-31|-27|-26|-27|-27|-31|-29|-26|-32|-27|-28|-26|-28|-31|-26|-30|-25|-29|-30|-30|-29|-28|-26|-26|-28|-27|-28|-28|-28|-29|-29|-31|-29|-28|-25|-29|-29|-30|-30|-29|-29|-29|-31|-31|-29|-27|-29|-26|-28|-31|-28|-28|\",\"phase\":\"00\",\"report_time\":\"2020-07-16 14:07:44\"}, {\"qrcode\":\"000000000003\",\"IIqrcode\":\"000000000021\",\"ao\":\"1\",\"seq\":\"00\",\"data\":\"84|78|76|69|65|66|59|61|61|57|53|45|44|43|37|35|30|20|16|14|10|4|-4|-7|-14|-18|-22|-29|-25|-32|-36|-44|-47|-49|-55|-61|-66|-68|-71|-75|-86|-89|-86|-88|-96|-99|-101|-101|-114|-111|-116|-118|-120|-120|-121|-123|-121|-125|-124|-128|-128|-129|-127|-131|-128|-129|-131|-135|-130|-128|-129|-131|-125|-121|-111|-109|-104|-103|-101|-101|-100|-93|-90|-86|-82|-84|-79|-73|-68|-64|-61|-56|-49|-43|-37|-33|-25|-18|-16|-16|-9|-6|-2|2|6|11|21|22|26|32|35|39|44|42|48|55|58|61|63|64|69|74|76|77|78|78|80|79|81|82|89|87|87|91|89|86|92|89|90|93|90|89|92|87|86|80|74|69|70|63|61|58|61|51|49|49|47|44|38|38|28|25|21|17|8|3|-1|-6|-6|-15|-20|-24|-30|-31|-36|-41|-48|-52|-58|-58|-61|-69|-72|-82|-82|-87|-89|-92|-97|-96|-100|-102|-102|-108|-109|-113|-114|-119|-119|-123|-121|-122|-128|-126|-129|-124|-130|-129|-132|-130|-130|-130|-130|-126|-131|-129|-124|-120|-116|-105|-108|-105|-105|-99|-95|-93|-90|-89|-86|-78|-77|-76|-66|-64|-59|-59|-51|-46|-37|-31|-24|-19|-19|-11|-7|-5|-3|4|8|16|16|24|28|28|32|37|47|49|50|54|52|58|61|65|70|71|73|75|72|79|84|83|83|84|88|90|93|92|90|92|90|92|95|92|91|91|89|90|84|81|77|69|69|67|64|60|60|52|51|49|48|39|38|33|30|26|23|18|11|5|-3|-7|-10|-16|-20|-26|-27|-32|-34|-42|-50|-51|-54|-59|-65|-70|-72|-80|-78|-85|-91|-86|-94|-97|-100|-100|-107|-107|-115|-115|-23|-24|-26|-23|-23|-20|-25|-24|-22|-19|-19|-22|-21|-25|-23|-25|-25|-22|-25|-26|-24|-24|-25|-23|-23|-23|-25|-24|-24|-23|-23|-24|-25|-23|-24|-25|-20|-24|-20|-20|-23|-25|-23|-24|-24|-24|-23|-22|-26|-21|-21|-27|-27|-25|-22|-23|-24|-22|-22|-24|-22|-23|-23|-24|-23|-23|-21|-23|-24|-22|-24|-19|-25|-23|-22|-23|-20|-25|-25|-23|-20|-24|-23|-24|-25|-24|-25|-20|-22|-23|-21|-21|-25|-23|-20|-24|-25|-24|-25|-26|-21|-23|-24|-26|-25|-23|-20|-22|-21|-22|-24|-27|-23|-22|-28|-23|-23|-25|-23|-23|-22|-23|-22|-26|-21|-21|-27|-24|-26|-23|-28|-28|-22|-24|-24|-21|-34|-27|-24|-21|-20|-27|-25|-23|-24|-25|-20|-22|-26|-22|-22|-26|-22|-22|-22|-22|-25|-24|-21|-24|-22|-25|-27|-23|-24|-24|-26|-25|-24|-22|-25|-21|-24|-26|-26|-22|-24|-23|-25|-23|-28|-22|-21|-22|-21|-24|-24|-23|-23|-23|-25|-20|-19|-25|-27|-24|-23|-21|-23|-26|-24|-23|-30|-26|-22|-26|-25|-23|-26|-23|-23|-24|-25|-23|-22|-24|-23|-22|-22|-22|-21|-24|-24|-22|-22|-28|-26|-23|-26|-23|-26|-25|-25|-23|-25|-27|-23|-23|-24|-23|-21|-24|-22|-25|-23|-25|-28|-25|-24|-25|-25|-24|-27|-27|-22|-24|-23|-23|-22|-24|-26|-23|-24|-25|-25|-22|-26|-25|-25|-26|-21|-21|-27|-23|-20|-25|-23|-26|-23|-27|-22|-21|-24|-25|-22|-22|-24|-24|-27|-21|-20|-24|-23|-25|-23|-24|-23|-24|-23|-25|-21|-32|-25|-24|-22|-24|-26|-25|-24|-24|-25|-24|-22|-27|-22|-25|-25|-25|-23|-22|-24|-26|-24|-24|-27|-22|-25|-25|-22|-23|-22|-24|-25|-24|-24|-26|-24|-24|-24|-21|-30|-30|-30|-28|-28|-29|-28|-29|-29|-30|-28|-31|-27|-27|-28|-27|-27|-27|-27|-27|-23|-24|-28|-25|-29|-26|-25|-28|-27|-29|-31|-30|-27|-29|-28|-27|-28|-28|-26|-26|-26|-26|-27|-26|-25|-26|-28|-26|-25|-22|-26|-26|-26|-25|-26|-26|-29|-30|-25|-24|-29|-27|-27|-26|-26|-27|-27|-29|-27|-29|-26|-26|-30|-23|-27|-26|-27|-25|-19|-24|-27|-29|-29|-25|-24|-27|-27|-25|-27|-28|-27|-28|-27|-27|-24|-30|-31|-25|-23|-28|-28|-29|-29|-28|-27|-27|-26|-29|-27|-30|-25|-26|-30|-26|-29|-29|-30|-27|-29|-29|-25|-26|-26|-28|-27|-28|-26|-28|-28|-28|-27|-29|-29|-26|-27|-25|-25|-29|-27|-28|-25|-26|-28|-29|-27|-29|-27|-27|-26|-28|-28|-29|-26|-28|-27|-28|-29|-25|-28|-27|-33|-27|-29|-29|-26|-27|-28|-27|-31|-25|-27|-27|-28|-30|-27|-33|-27|-27|-26|-26|-27|-29|-27|-26|-32|-27|-26|-26|-29|-28|-27|-31|-27|-27|-30|-29|-28|-25|-33|-26|-26|-29|-25|-26|-31|-26|-24|-28|-28|-26|-26|-23|-29|-30|-23|-28|-29|-28|-25|-28|-26|-24|-30|-29|-29|-27|-23|-26|-25|-32|-29|-27|-28|-26|-25|-27|-30|-28|-25|-28|-24|-34|-27|-25|-28|-26|-29|-28|-28|-29|-26|-25|-28|-27|-23|-26|-28|-27|-30|-27|-30|-30|-26|-25|-27|-28|-26|-26|-27|-26|-23|-31|-24|-31|-26|-25|-23|-24|-29|-30|-28|-26|-27|-28|-24|-27|-27|-27|-27|-22|-32|-25|-28|-26|-29|-27|-28|-30|-30|-31|-28|-28|-27|-28|-28|-26|-26|-24|-30|-27|-27|-27|-27|-30|-27|-25|-28|-27|-26|-26|-27|-29|-26|-27|-27|-26|-27|-31|-29|-27|-29|-29|-27|-27|-25|-27|-25|-26|-27|-29|\",\"phase\":\"00\",\"report_time\":\"2020-07-16 14:07:44\"}, {\"qrcode\":\"000000000021\",\"IIqrcode\":\"000000000003\",\"ao\":\"1\",\"seq\":\"00\",\"data\":\"92|94|87|81|74|73|68|69|64|61|60|57|53|47|43|43|41|35|29|24|16|19|84|74|50|25|1|-14|-19|-23|-27|-33|-35|-42|-47|-50|-56|-60|-65|-67|-71|-79|-82|-83|-90|-92|-97|-98|-98|-102|-105|-107|-110|-114|-115|-113|-115|-119|-117|-123|-120|-129|-124|-130|-128|-128|-125|-124|-123|-126|-124|-125|-125|-123|-119|-106|-106|-101|-100|-95|-98|-95|-91|-86|-84|-82|-77|-70|-65|-61|-62|-56|-50|-48|-37|-31|-26|-24|-15|-15|-10|-6|-1|0|7|11|20|22|26|31|37|34|44|49|51|55|59|61|64|66|70|74|77|80|83|85|84|87|87|89|90|93|96|93|94|99|96|95|98|98|101|97|96|92|94|94|88|82|75|76|69|67|66|59|58|50|53|49|47|43|39|34|32|24|20|20|40|77|51|26|3|-15|-20|-27|-29|-35|-38|-45|-47|-50|-55|-61|-63|-68|-73|-81|-82|-84|-89|-89|-94|-96|-98|-103|-99|-106|-111|-112|-113|-115|-115|-119|-120|-118|-119|-120|-124|-127|-123|-124|-122|-128|-125|-125|-122|-123|-121|-120|-113|-110|-103|-99|-103|-102|-96|-90|-86|-86|-83|-79|-76|-70|-68|-64|-57|-55|-54|-44|-40|-30|-27|-22|-16|-11|-8|-3|2|2|7|13|19|22|27|30|36|40|39|45|52|59|58|59|62|67|72|72|74|79|81|82|85|84|85|86|88|89|94|92|96|97|95|94|96|94|96|97|94|99|93|90|88|79|79|74|72|69|65|65|62|55|53|52|46|46|39|30|30|28|24|17|83|76|56|30|3|-14|-18|-24|-31|-31|-34|-44|-46|-49|-57|-60|-62|-70|-72|-81|-77|-84|-89|-90|-94|-97|-96|-104|-107|-104|-22|-24|-24|-25|-24|-21|-22|-20|-29|-23|-21|-20|-27|-22|-19|-24|-25|-22|-25|-23|-23|-24|-23|-23|-23|-22|-23|-21|-23|-24|-21|-20|-16|-21|-22|-21|-21|-24|-23|-21|-21|-24|-20|-17|-24|-23|-26|-25|-23|-19|-24|-26|-22|-23|-28|-26|-23|-24|-22|-23|-23|-21|-23|-21|-24|-20|-18|-22|-19|-24|-23|-22|-26|-21|-23|-20|-23|-20|-24|-24|-23|-19|-22|-20|-23|-24|-24|-23|-19|-20|-23|-23|-23|-26|-22|-26|-22|-23|-23|-26|-25|-24|-22|-24|-23|-23|-25|-23|-25|-23|-26|-23|-19|-24|-20|-22|-22|-21|-22|-23|-23|-21|-20|-23|-21|-21|-23|-24|-20|-22|-24|-21|-25|-26|-22|-23|-26|-23|-26|-25|-23|-23|-23|-23|-24|-20|-24|-22|-21|-24|-22|-23|-23|-22|-24|-22|-24|-24|-24|-25|-26|-21|-20|-23|-22|-23|-23|-24|-20|-30|-27|-23|-22|-21|-23|-24|-21|-22|-24|-24|-27|-26|-22|-24|-26|-24|-23|-24|-25|-22|-23|-20|-27|-25|-21|-21|-22|-22|-22|-22|-23|-21|-23|-25|-27|-23|-22|-22|-21|-20|-22|-24|-23|-24|-22|-27|-24|-20|-23|-23|-23|-23|-23|-23|-24|-23|-21|-21|-23|-23|-23|-22|-16|-23|-22|-21|-22|-22|-22|-22|-21|-23|-23|-21|-21|-22|-22|-20|-22|-22|-20|-23|-23|-22|-23|-20|-22|-24|-22|-25|-23|-25|-21|-19|-21|-21|-23|-21|-25|-25|-23|-24|-24|-21|-22|-25|-21|-24|-22|-22|-20|-24|-23|-23|-18|-21|-23|-21|-22|-24|-19|-24|-25|-24|-18|-25|-23|-23|-22|-21|-22|-24|-22|-24|-23|-23|-22|-21|-23|-23|-21|-22|-28|-25|-24|-21|-24|-22|-26|-27|-23|-24|-22|-19|-19|-24|-22|-24|-19|-23|-22|-22|-23|-20|-23|-21|-22|-23|-19|-25|-27|-25|-25|-26|-28|-26|-26|-24|-24|-26|-26|-23|-26|-23|-27|-29|-27|-25|-25|-25|-31|-27|-26|-26|-28|-26|-28|-26|-23|-25|-27|-28|-26|-26|-27|-29|-25|-30|-28|-28|-26|-27|-27|-28|-29|-28|-29|-26|-28|-29|-26|-26|-31|-28|-25|-26|-27|-26|-28|-28|-27|-26|-27|-26|-28|-26|-28|-22|-20|-26|-28|-28|-26|-25|-26|-28|-28|-27|-27|-27|-27|-27|-28|-26|-28|-27|-23|-24|-27|-25|-24|-26|-25|-24|-27|-25|-28|-30|-23|-27|-26|-28|-27|-26|-27|-27|-26|-27|-29|-23|-26|-25|-23|-22|-25|-28|-28|-25|-26|-26|-26|-28|-25|-26|-28|-27|-28|-32|-30|-23|-25|-26|-25|-25|-28|-25|-28|-30|-30|-27|-26|-27|-25|-26|-26|-27|-29|-27|-25|-25|-25|-26|-25|-25|-28|-27|-25|-28|-31|-24|-25|-27|-24|-26|-28|-30|-26|-24|-27|-26|-27|-26|-23|-26|-27|-27|-29|-31|-28|-27|-25|-27|-26|-26|-25|-23|-29|-23|-24|-29|-26|-27|-28|-25|-26|-27|-27|-28|-30|-27|-25|-27|-27|-26|-28|-32|-30|-28|-24|-27|-29|-28|-27|-27|-29|-28|-27|-26|-27|-26|-28|-25|-27|-24|-25|-26|-29|-27|-27|-26|-24|-25|-24|-23|-23|-28|-32|-25|-28|-26|-27|-25|-27|-28|-26|-24|-24|-24|-27|-27|-26|-25|-25|-26|-29|-27|-25|-24|-26|-27|-27|-27|-28|-27|-25|-33|-28|-24|-27|-26|-23|-25|-26|-26|-27|-25|-28|-26|-25|-27|-28|-26|-26|-29|-23|-31|-26|-25|-28|-27|-25|-26|-27|-27|-23|-29|-28|-30|-27|-30|-29|-25|-26|-26|-27|-26|-26|-24|-30|-26|-28|-27|-24|-26|-34|-30|-28|-31|-28|-25|-28|-28|-31|-30|-26|-24|-26|-28|-29|-28|-23|-26|-27|-27|-27|-25|-28|-27|-20|-26|\",\"phase\":\"00\",\"report_time\":\"2020-07-16 14:07:44\"}]";

    public String Test(){
        String  str = Compare(JsonStrTest);
        System.out.println(str);
            return str;
    }

    public String dengCompare(List<TopGraphicDataBean> beans){
        if(beans==null || beans.isEmpty()){
            return "";
        }
        return Compare(beans.toString());
    }

    /**
     * 分支识别结果
     */
    private String Compare(String jsonStr) {
        KalmanFilter kalmanFilter = new KalmanFilter();
        kalmanFilter.initial();
        //解析json
            //new JSONObject();
        JSONArray jsonArray = JSONObject.parseArray(jsonStr);

        HashMap<String, String> phaseMap = new HashMap<>();
        //System.out.println(jsonArray);
        for(int i=0;i<jsonArray.size();i++){
            JSONObject jsonobj = (JSONObject) jsonArray.get(i);
            String data = (String) jsonobj.get("data");
            String[] strArray2 = data.split("\\|");
            ArrayList<Integer> point = new ArrayList<>();
            //先对数据进行滤波
            int oldValue = Integer.parseInt(strArray2[0]);
            for (String value : strArray2) {
                oldValue = (int) kalmanFilter.KalmanFilter(oldValue,Integer.parseInt(value));
                point.add(oldValue);//过滤后的数据
            }


            /**
             * 不同类型电表单项电表不同处理
             */

            String phase  = (String) jsonobj.get("phase");

            boolean isFork =false; //是否有分支脉冲
            String qrcode  = (String) jsonobj.get("qrcode");//地址
            if(phase.equals("00")){    //三项电表读取方式
                ArrayList<Integer> dataArrA = new ArrayList<>();
                ArrayList<Integer> dataArrB = new ArrayList<>();
                ArrayList<Integer> dataArrC = new ArrayList<>();
                for (int index=0;index<point.size();index++){
                    if(index < 340){
                        dataArrA.add(point.get(index));  //A项采集数据
                    }

                    if(index>=340 && index<=680){
                        dataArrB.add(point.get(index));
                    }

                    if(index > 680){
                        dataArrC.add(point.get(index));
                    }

                }

                int resA  = this.SingleMeterA(dataArrA);
                int resB  = this.SingleMeterB(dataArrB);
                int resC  = this.SingleMeterC(dataArrC);

               isFork =   resA == 1 || resB ==1 || resC ==1  ? true : false;

               if(resA==1){
                   phaseMap.put(qrcode,"A");
               }else if(resB ==1){
                   phaseMap.put(qrcode,"B");
               }else if(resC == 1){
                   phaseMap.put(qrcode,"C");
               }


                }else if (phase.equals("01")){  //A项
                isFork =  this.SingleMeterA(point) == 1 ?  true :false;
                if(isFork){
                    phaseMap.put(qrcode,"A");
                }
                }else if (phase.equals("02")){ //B项
                    isFork =  this.SingleMeterB(point) == 1 ?  true :false;
                if(isFork){
                    phaseMap.put(qrcode,"B");
                }

                }else if (phase.equals("03")){ //C项
                    isFork =  this.SingleMeterC(point) == 1 ?  true :false;
                if(isFork){
                    phaseMap.put(qrcode,"C");
                }

            }

            jsonobj.put("isFork",isFork);
        }
        //生成树状结构json
       String Json =  Analysis(jsonArray);
        JSONObject jsonObject = JSONObject.parseObject(Json);
        jsonObject.put("phaseMap",phaseMap);
        String jsonStr2=  JSONObject.toJSONString(jsonObject);
        return jsonStr2;

    }


    /**
     * 通过最大值判断是否存在波峰
     *
     * @param point
     */

    private boolean JuggByMaxKey(ArrayList<Integer> point) {


        /**
         * 不同类型电表单项电表不同处理
         */

        /**
         * 假设第一个波形区间点
         * start 114
         * end  129
         */
        int start = 114;
        int end = 129;
        ArrayList<Integer> subSet = this.getSubSet(point, start, end);
        int maxKey1 = this.getMaxKey(point, subSet); //第一个波峰
        HashMap<String, Object> result = new HashMap<>();
        result.put("point", point);
        /**
         * 假设第二个区间
         * start 239
         * end  254
         */
        int start2 = 239;
        int end2 = 254;

        ArrayList<Integer> subSet2 = this.getSubSet(point, start2, end2);
        int maxKey2 = this.getMaxKey(point, subSet2);
        boolean checkRes1 = false;
        boolean checkRes2 = false;
        if (maxKey1 > 0)
        {
            checkRes1 = this.getlinearRegression(subSet, maxKey1, point, maxKey1 + 114);
        }
        if (maxKey2 > 0) {
            checkRes2 = this.getlinearRegression(subSet2, maxKey2, point, maxKey2 + 239);
        }

        if (checkRes1 && checkRes2) {
            result.put("result", 1);  //识别波形
        } else {
            //回归直线斜率判断
        }


        return false;
    }


    /**
     * 取得集合区间的子区间
     *
     * @param point
     * @param start
     * @param end
     * @return
     */
    private ArrayList<Integer> getSubSet(ArrayList<Integer> point, int start, int end){

        ArrayList<Integer> subSet = new ArrayList<>();
        for (int i = 0; i < point.size(); i++) {
            if (i >= start && i <= end) {
                subSet.add(point.get(i));
            }
        }
        return subSet;
    }


    /**
     * @param point
     * @param subSet
     * @return int max
     */
    private int getMaxKey(ArrayList<Integer> point, ArrayList<Integer> subSet) {
        int count = point.size();
        int sum = 0;
        double average = 0;
        for (int i = 0; i < point.size(); i++) {
            sum += point.get(i);
        }
        average = sum / count;
        //子集合的最大值
        double maxValue = 0;
        int maxKey = 0;
        for (int index = 0; index < subSet.size(); index++) {
            int teampValue = subSet.get(index);
            if (index > 0 && index < subSet.size() - 1) {
                teampValue = subSet.get(index - 1) + subSet.get(index) + subSet.get(index + 1) / 3;     //最近3点的平均值
            }
            if (teampValue > maxValue) {
                maxKey = index;
            }
        }
        //最大值区间 中间左右偏移3个点
        int mid = subSet.size() / 2;

        if (mid - 3 <= maxKey && maxKey <= mid + 3) {
            return maxKey;
        }

        return 0;
    }


    /**
     * 求线性回归方程斜率
     *
     * @param subSet    子集合
     * @param maxKey    子集合下标
     * @param point
     * @param offsetKey 主集合偏移下标
     * @return 先求整个区间的回归方程
     * 再比较左线性回归与右线性回归的比较
     */
    private boolean getlinearRegression(ArrayList<Integer> subSet, int maxKey, ArrayList<Integer> point, int offsetKey) {


        ArrayList<Integer> arr1 = new ArrayList<>();
        ArrayList<Integer> arr2 = new ArrayList<>();
        int sumKey1 = 0;
        int sumKey2 = 0;
        int sumY1 = 0;
        int sumY2 = 0;

        for (int i = 0; i < subSet.size(); i++) {
            if (i < maxKey) {
                arr1.add(subSet.get(i));
                sumKey1 += i;
                sumY1 += subSet.get(i);
            }

            if (i > maxKey) {
                arr2.add((subSet.get(i)));
                sumKey2 += i;
                sumY2 += subSet.get(i);

            }
        }

        int count1 = arr1.size();
        int count2 = arr2.size();

        double xavg1 = sumKey1 / count1;
        double xavg2 = sumKey2 / count2;

        double yavg1 = sumY1 / count1;
        double yavg2 = sumY2 / count2;

        double mdcross_sum1 = 0; // X,Y 离均差交乘积和
        double xdif_square_sum1 = 0; //X 离均差平方和

        for (int i = 0; i < count1; i++) {
            double xdif = i - xavg1;
            double ydif = subSet.get(i) - yavg1;
            mdcross_sum1 += xdif * ydif;
            xdif_square_sum1 += Math.pow(xdif, 2);
        }

        double b1 = new BigDecimal(mdcross_sum1 / xdif_square_sum1).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue(); //保留2位小数


        double mdcross_sum2 = 0; // X,Y 离均差交乘积和
        double xdif_square_sum2 = 0; //X 离均差平方和
        for (int i = 0; i < count2; i++) {
            double xdif = i - xavg2;
            double ydif = subSet.get(i) - yavg2;
            mdcross_sum2 += xdif * ydif;
            xdif_square_sum2 += Math.pow(xdif, 2);
        }

        double b2 = new BigDecimal(mdcross_sum2 / xdif_square_sum2).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue(); //保留2位小数


        /**
         * 区间1倒退15个点求斜率
         */
        ArrayList<Integer> lefArr = new ArrayList<>();
        ArrayList<Integer> rightArr = new ArrayList<>();

        for (int i = 0; i < point.size(); i++) {
            if (i >= offsetKey - 15 && i <= offsetKey) {
                lefArr.add(point.get(i));
            }

            if (i > offsetKey && i < offsetKey + 15) {
                rightArr.add(point.get(i));
            }

        }

        //获取左右两边的斜率


        double leftK = this.getSlope(lefArr);
        double rightK = this.getSlope(rightArr);

        /**
         * 积分>=1 则认是正常波形
         */
        int score = 0;
        if (b1 > 0 && b2 < 0 && Math.abs(b1) > 1 && Math.abs(b2) > 1) {
            if (Math.abs(leftK) < Math.abs(b1) && Math.abs(b1) - Math.abs(leftK) > 0.8) {
                score += 1;
            }

            if (Math.abs(rightK) < Math.abs(b2) && Math.abs(b2) - Math.abs(rightK) > 0.8) {
                score += 1;
            }

        }

        if (score >= 1) {
            return true;
        }

        return false;
    }


    /**
     * 点集合的回归线性方程
     *
     * @param subSet
     * @return
     */
    private double getSlope(ArrayList<Integer> subSet) {

        int sumKey1 = 0;
        int sumY1 = 0;

        for (int i = 0; i < subSet.size(); i++) {
            sumKey1 += i;
            sumY1 += subSet.get(i);
        }
        int count1 = subSet.size();

        double xavg1 = sumKey1 / count1;
        double yavg1 = sumY1 / count1;

        double mdcross_sum1 = 0; // X,Y 离均差交乘积和
        double xdif_square_sum1 = 0; //X 离均差平方和

        for (int i = 0; i < count1; i++) {
            double xdif = i - xavg1;
            double ydif = subSet.get(i) - yavg1;
            mdcross_sum1 += xdif * ydif;
            xdif_square_sum1 += Math.pow(xdif, 2);
        }
        double b1 = new BigDecimal(mdcross_sum1 / xdif_square_sum1).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue(); //保留2位小数
        return b1;
    }


    /**
     * 判断左右两边的斜率变化
     *
     * @return
     */
    private int Checkslope(ArrayList<Integer> point) {


        ArrayList<Integer> oneLeft = new ArrayList<>();
        ArrayList<Integer> oneArrLeftHafl = new ArrayList<>();
        ArrayList<Integer> oneArrRightHafl = new ArrayList<>();
        ArrayList<Integer> oneRight = new ArrayList<>();
        ArrayList<Integer> twoLeft = new ArrayList<>();
        ArrayList<Integer> twoArrLeftHalf = new ArrayList<>();
        ArrayList<Integer> twoArrRightHalf = new ArrayList<>();
        ArrayList<Integer> twoRight = new ArrayList<>();

        //不同点位的脉冲波形需要根据出现的范围进行调整
        //脉冲范围1
        int star1 = 50;
        int end1 = 117;
        int mid1 = (star1 + end1) / 2;
        //脉冲范围2
        int start2 = 250;
        int end2 = 317;
        int mid2 = (start2 + end2) / 2;


        //左边大范围
        for (int i = 0; i < point.size(); i++) {

            if (i >= star1 && i <= mid1) {
                oneLeft.add(point.get(i));
            }

            if (i >= star1 + 15 && i <= mid1) {    //左边趋势
                oneArrLeftHafl.add(point.get(i));
            }


            if (i >= mid1 && i <= end1 - 15) {  //右边趋势
                oneArrRightHafl.add(point.get(i));
            }

            if (i >= mid1 && i <= end1) {
                oneRight.add(point.get(i));
            }

            if (i >= start2 && i <= mid2) {
                twoLeft.add(point.get(i));
            }

            //第二个点左边趋势
            if (i >= start2 + 15 && i <= mid2) {
                twoArrLeftHalf.add(point.get(i));
            }
            //第二个点右边趋势
            if (i >= mid2 && i <= end2 - 15) {
                twoArrRightHalf.add(point.get(i));
            }

            if (i >= mid2 && i <= end2) {
                twoRight.add(point.get(i));
            }

        }

        double oneLeftK = this.getSlope(oneLeft);
        double oneArrLeftHalfK= this.getSlope(oneArrLeftHafl);
        double oneArrRightHalfk = this.getSlope(oneArrRightHafl);
        double oneRightK= this.getSlope(oneRight);

        double twoLeftK= this.getSlope(twoLeft);
        double twoArrLeftHalfK= this.getSlope(twoArrLeftHalf);
        double twoArrRightHalfK= this.getSlope(twoArrRightHalf);
        double twoRightK= this.getSlope(twoRight);

        //曲线判断时 斜率必须大于0.38否则认为接近直线
        if(!(Math.abs(oneLeftK) >= 0.38  && Math.abs(oneRightK) >=0.38 && Math.abs(twoLeftK) >= 0.38  && Math.abs(twoRightK) >=0.38 )){
            return 1;
        }

        return 0;
    }




    /**
     * A项目波形(有三个脉冲)
     *
     */

    private int SingleMeterA(ArrayList<Integer> dataArr){


        /***
         * 三个点
         *
         * 18-28 第一个波峰
         * 162-172 第二个波峰
         * 305-315 第三个波峰
         *
         */
        int start1=18;
        int end1 =28;
        int start2= 162;
        int end2 = 172;
        int start3 =305;
        int end3 = 315;

        ArrayList<Integer> frist = new ArrayList<>();
        ArrayList<Integer> second = new ArrayList<>();
        ArrayList<Integer> third = new ArrayList<>();

        for(int i=0;i<dataArr.size();i++){

           if( i>=start1-1 && i<=end1-1 ){
               frist.add(dataArr.get(i));
           }


           if(i>=start2-1 && i<=end2-1){
               second.add(dataArr.get(i));
           }

           if(i>=start3-1 && i<=end3-1){
                third.add(dataArr.get(i));
           }

       }

        int maxKey=this.getMaxKey(dataArr,frist);
        int dataArrKey1 = maxKey+start1-1;

        boolean checkRes1 =false;  //第一个波形
        boolean checkRes2 =false;
        boolean checkRes3 =false;

        if(maxKey > 0){
            checkRes1 = this.getlinearRegression(frist,maxKey,dataArr,dataArrKey1);
        }
        int maxKey2 =  this.getMaxKey(dataArr,second);
        int dataArrKey2 = maxKey2 +  start2-1;

        if(maxKey2 >0){
            checkRes2 = this.getlinearRegression(second,maxKey2,dataArr,dataArrKey2);
        }
        int maxKey3 = this.getMaxKey(dataArr,third);
        int dataArrKey3 = maxKey3+start3-1;

        if(maxKey3 >0){
            checkRes3 = this.getlinearRegression(third,maxKey3,dataArr,dataArrKey3);
        }


        if(checkRes1 && checkRes2 && checkRes3){
            return 1;
        }else{
            return  this.checkslopeA(dataArr); //分支识别结果

        }

    }


    /**
     * A项判断左右两边斜率变化
     */

    private int checkslopeA(ArrayList<Integer> point){

        /**
         * 18-28 第一个波峰
         * 第一波形点
         * 18-28 检测第一个波峰
         *
         * 中间点
         * 23
         * 左推10个点
         * 波形趋势左边
         *  8 -23
         * 右推10个点
         * 23-38
         * 波形右边趋势
         /**
         * 162-172 第二个波峰
         * 中间点 167
         *   左右各推10个点
         * 左边趋势
         * 152-167
         * 右边趋势
         *  167- 182
         */


        /**
         * 第三个波峰
         *
         * 中间点  310
         * 左右各推10个点
         *  305-315 第三个波峰
         * 左边趋势
         *   295-310
         * 右边趋势
         * 310 - 325
         *
         */






        ArrayList<Integer> oneLeft = new ArrayList<>();
        ArrayList<Integer> oneArrLeftHafl = new ArrayList<>();
        ArrayList<Integer> oneArrRightHafl = new ArrayList<>();
        ArrayList<Integer> oneRight = new ArrayList<>();
        ArrayList<Integer> twoLeft = new ArrayList<>();
        ArrayList<Integer> twoArrLeftHalf = new ArrayList<>();
        ArrayList<Integer> twoArrRightHalf = new ArrayList<>();
        ArrayList<Integer> twoRight = new ArrayList<>();
        ArrayList<Integer> treeLeft = new ArrayList<>();
        ArrayList<Integer> treeArrLeftHalf = new ArrayList<>();
        ArrayList<Integer> treeArrRightHalf = new ArrayList<>();
        ArrayList<Integer> treeRight = new ArrayList<>();


        /**
         * 第一个脉冲点
         */
        int start1 = 18;
        int mid1 = 23;
        int end1 = 28;

        /**
         * 第二个脉冲点
         * 162-172 第二个波峰
         *          * 中间点 167
         *          *   左右各推10个点
         *          * 左边趋势
         *          * 152-167
         *          * 右边趋势
         *         *  167- 182
         */
        int start2 = 162;
        int mid2= 167;
        int end2 = 172;



        /**
         第三个波峰
         * 中间点  310
         * 左右各推10个点
         *  305-315 第三个波峰
         * 左边趋势
         *   295-310
         * 右边趋势
         * 310 - 325
         */

        int start3 = 305;
        int mid3 = 310;
        int end3 = 315;

        //左边大范围
        for (int i = 0; i < point.size(); i++) {

            if (i >= start1 -10 && i <= mid1) {
                oneLeft.add(point.get(i));
            }

            if (i >= start1  && i <= mid1) {    //左边趋势
                oneArrLeftHafl.add(point.get(i));
            }


            if (i >= mid1 && i <= end1 ) {  //右边趋势
                oneArrRightHafl.add(point.get(i));
            }

            if (i >= mid1 && i <= end1+10) {
                oneRight.add(point.get(i));
            }

            /**
             * 第二点
             */
            if (i >= start2 -10 && i <= mid2) {
                twoLeft.add(point.get(i));
            }

            //第二个点左边趋势
            if (i >= start2  && i <= mid2) {
                twoArrLeftHalf.add(point.get(i));
            }
            //第二个点右边趋势
            if (i >= mid2 && i <= end2) {
                twoArrRightHalf.add(point.get(i));
            }

            if (i >= mid2 && i <= end2+10) {
                twoRight.add(point.get(i));
            }

            /**
             * 第三个波峰
             */
            if(i>= start3 -10 && i<=mid3){
                treeLeft.add(point.get(i));
            }

            if(i> start3  && i< mid3){
                treeArrLeftHalf.add(point.get(i));
            }

            if(i>=mid3  && i<=end3){
                treeArrRightHalf.add(point.get(i));
            }

            if(i>=mid3 && i<=end3+10){
                treeRight.add(point.get(i));
            }


        }

        double oneLeftK = this.getSlope(oneLeft);
        double oneArrLeftHalfK= this.getSlope(oneArrLeftHafl);
        double oneArrRightHalfk = this.getSlope(oneArrRightHafl);
        double oneRightK= this.getSlope(oneRight);

        double twoLeftK= this.getSlope(twoLeft);
        double twoArrLeftHalfK= this.getSlope(twoArrLeftHalf);
        double twoArrRightHalfK= this.getSlope(twoArrRightHalf);
        double twoRightK= this.getSlope(twoRight);


        double treeLeftK = this.getSlope(treeLeft);
        double treeArrLeftHalfK = this.getSlope(treeArrLeftHalf);
        double treeArrRightHalfK = this.getSlope(treeArrRightHalf);
        double treeRightK = this.getSlope(treeRight);

        //曲线判断时 斜率必须至少5条大于0.38否则认为接近直线

        int socer = 0;

        socer+=Math.abs(oneLeftK) >= lineK  ?  1 : 0;
        socer+=Math.abs(oneRightK) >= lineK  ?  1 : 0;
        socer+=Math.abs(twoLeftK) >= lineK  ?  1 : 0;
        socer+=Math.abs(twoRightK) >= lineK  ?  1 : 0;
        socer+=Math.abs(treeLeftK) >= lineK  ?  1 : 0;
        socer+=Math.abs(treeRightK) >= lineK  ?  1 : 0;

        if(socer < 4){
            return  3;   //非分支识别
        }


        //趋势判断
        ArrayList<Boolean> result = new ArrayList<>();

        if(oneArrLeftHalfK - oneArrRightHalfk > 0.8){
            result.add(this.jugger(oneLeftK,oneArrLeftHalfK,"left"));
            result.add(this.jugger(oneRightK,oneArrRightHalfk,"right"));
        }

        if(twoArrLeftHalfK - twoArrRightHalfK > 0.8){
            result.add(this.jugger(twoLeftK,twoArrLeftHalfK,"left"));
            result.add(this.jugger(twoRightK,twoArrRightHalfK,"right"));
        }

        if(treeArrLeftHalfK - treeArrRightHalfK > 0.8){
            result.add(this.jugger(treeLeftK,treeArrLeftHalfK,"left"));
            result.add(this.jugger(treeRightK,treeArrRightHalfK,"right"));
        }


        int num = this.score(result);
        if(num > 3){
            return  1; //分支识别
        }

        return 3; //分支识别失败
    }



    /**
     * B项波形有2个脉冲
     * @param dataArr
     * @return
     */
    private int SingleMeterB(ArrayList<Integer> dataArr){


        /**
         * B项 2个点
         *  72
         *  217
         *  第一个点
         *  67-77
         * 第二个点
         *  212-222
         */


        int start1= 67;
        int end1= 77;
        int start2 = 212;
        int end2 = 222;

        ArrayList<Integer> frist = new ArrayList<>();
        ArrayList<Integer> second = new ArrayList<>();

        for(int i=0;i<dataArr.size();i++){

            if( i>=start1-1 && i<=end1-1 ){
                frist.add(dataArr.get(i));
            }


            if(i>=start2-1 && i<=end2-1){
                second.add(dataArr.get(i));
            }

        }


        int maxKey=this.getMaxKey(dataArr,frist);
        int dataArrKey1 = maxKey+start1-1;

        boolean checkRes1 =false;  //第一个波形
        boolean checkRes2 =false;

        if(maxKey > 0){
            checkRes1 = this.getlinearRegression(frist,maxKey,dataArr,dataArrKey1);
        }
        int maxKey2 =  this.getMaxKey(dataArr,second);
        int dataArrKey2 = maxKey2 +  start2-1;
        if(maxKey2 >0){
            checkRes2 = this.getlinearRegression(second,maxKey2,dataArr,dataArrKey2);
        }

        if(checkRes1 && checkRes2 ){
            return 1;
        }else{
            return  this.checkslopeB(dataArr); //分支识别结果

        }

    }
    private int checkslopeB(ArrayList<Integer> point) {

        /**
         * 第一波形点
         * 67-77 检测第一个波峰
         *
         * 中间点
         * 70
         * 左推10个点
         *
         * 波形趋势左边
         *  57-70
         *
         * 右推10个点
         * 70-87
         * 波形右边趋势
         *
         * 第二个点
         *  212-222
         *中间点
         * 217
         * 左推10个点
         *
         * 波形趋势左边
         *  202-214
         * 右推10个点

         * 波形右边趋势
         *  214 -232
         **/

        ArrayList<Integer> oneLeft = new ArrayList<>();
        ArrayList<Integer> oneArrLeftHafl = new ArrayList<>();
        ArrayList<Integer> oneArrRightHafl = new ArrayList<>();
        ArrayList<Integer> oneRight = new ArrayList<>();
        ArrayList<Integer> twoLeft = new ArrayList<>();
        ArrayList<Integer> twoArrLeftHalf = new ArrayList<>();
        ArrayList<Integer> twoArrRightHalf = new ArrayList<>();
        ArrayList<Integer> twoRight = new ArrayList<>();

        /**
         * B项 2个点
         *  72
         *  217
         *  第一个点
         *  67-77
         * 第二个点
         *  212-222
         */

        int start1 = 67;
        int mid1= 72;
        int end1 =77;

        int start2 =210;
        int mid2= 214;
        int end2=220;


        for(int i=0;i<point.size();i++){

            if (i >= start1 -10 && i <= mid1) {
                oneLeft.add(point.get(i));
            }

            if (i >= start1  && i <= mid1) {    //左边趋势
                oneArrLeftHafl.add(point.get(i));
            }


            if (i >= mid1 && i <= end1 ) {  //右边趋势
                oneArrRightHafl.add(point.get(i));
            }

            if (i >= mid1 && i <= end1+10) {
                oneRight.add(point.get(i));
            }

            /**
             * 第二点
             */
            if (i >= start2 -10 && i <= mid2) {
                twoLeft.add(point.get(i));
            }

            //第二个点左边趋势
            if (i >= start2  && i <= mid2) {
                twoArrLeftHalf.add(point.get(i));
            }
            //第二个点右边趋势
            if (i >= mid2 && i <= end2) {
                twoArrRightHalf.add(point.get(i));
            }

            if (i >= mid2 && i <= end2+10) {
                twoRight.add(point.get(i));
            }

        }

        double oneLeftK = this.getSlope(oneLeft);
        double oneArrLeftHalfK= this.getSlope(oneArrLeftHafl);
        double oneArrRightHalfk = this.getSlope(oneArrRightHafl);
        double oneRightK= this.getSlope(oneRight);

        double twoLeftK= this.getSlope(twoLeft);
        double twoArrLeftHalfK= this.getSlope(twoArrLeftHalf);
        double twoArrRightHalfK= this.getSlope(twoArrRightHalf);
        double twoRightK= this.getSlope(twoRight);



        //曲线判断时 斜率必须至少5条大于0.38否则认为接近直线

        int socer = 0;

        socer+=Math.abs(oneLeftK) >= lineK  ?  1 : 0;
        socer+=Math.abs(oneRightK) >= lineK  ?  1 : 0;
        socer+=Math.abs(twoLeftK) >= lineK  ?  1 : 0;
        socer+=Math.abs(twoRightK) >= lineK  ?  1 : 0;

        if(socer <=2){
            return  3;   //非分支识别
        }


        //趋势判断
        ArrayList<Boolean> result = new ArrayList<>();

        if(oneArrLeftHalfK - oneArrRightHalfk > 0.8){
            result.add(this.jugger(oneLeftK,oneArrLeftHalfK,"left"));
            result.add(this.jugger(oneRightK,oneArrRightHalfk,"right"));
        }

        if(twoArrLeftHalfK - twoArrRightHalfK > 0.8){
            result.add(this.jugger(twoLeftK,twoArrLeftHalfK,"left"));
            result.add(this.jugger(twoRightK,twoArrRightHalfK,"right"));
        }



        int num = this.score(result);
        if(num >=2){
            return  1; //分支识别
        }

        return 3; //分支识别失败


    }



    /**
     * C项波形有2个脉冲
     * @param dataArr
     * @return
     */
    private int SingleMeterC(ArrayList<Integer> dataArr){


        /**
         * B项 2个点
         *  72
         *  217
         *  第一个点
         *  67-77
         * 第二个点
         *  212-222
         */


        int start1 = 115;
        int end1 = 125;
        int start2 = 260;
        int end2 = 270;

        ArrayList<Integer> frist = new ArrayList<>();
        ArrayList<Integer> second = new ArrayList<>();

        for(int i=0;i<dataArr.size();i++){

            if( i>=start1-1 && i<=end1-1 ){
                frist.add(dataArr.get(i));
            }


            if(i>=start2-1 && i<=end2-1){
                second.add(dataArr.get(i));
            }

        }


        int maxKey=this.getMaxKey(dataArr,frist);
        int dataArrKey1 = maxKey+start1-1;

        boolean checkRes1 =false;  //第一个波形
        boolean checkRes2 =false;

        if(maxKey > 0){
            checkRes1 = this.getlinearRegression(frist,maxKey,dataArr,dataArrKey1);
        }
        int maxKey2 =  this.getMaxKey(dataArr,second);
        int dataArrKey2 = maxKey2 +  start2-1;
        if(maxKey2 >0){
            checkRes2 = this.getlinearRegression(second,maxKey2,dataArr,dataArrKey2);
        }

        if(checkRes1 && checkRes2 ){
            return 1;
        }else{
            return  this.checkslopeC(dataArr); //分支识别结果

        }

    }

    /**
     * c項分支判断
     * @param point
     * @return
     */

    private int checkslopeC(ArrayList<Integer> point){



        /**
         *C项 2个点
         *  120
         *  265
         *  第一个点
         *  115-120-125
         * 第二个点
         *  260-265-270
         */



        /**
         *
         *
         *
         *
         *
         *
         *
         *
         * 第一波形点
         * 115-125 检测第一个波峰
         *
         * 中间点
         * 120
         * 左推10个点
         *
         * 波形趋势左边
         *  105-120
         *
         * 右推10个点
         * 120-135
         * 波形右边趋势
         *
         *
         *
         *
         * 第二个点
         * 260-265-270
         *中间点
         * 265
         * 左推10个点
         *
         * 波形趋势左边
         *  250-265
         * 右推10个点

         * 波形右边趋势
         *  265 -280
         **/


        ArrayList<Integer> oneLeft = new ArrayList<>();
            ArrayList<Integer> oneArrLeftHafl = new ArrayList<>();
            ArrayList<Integer> oneArrRightHafl = new ArrayList<>();
            ArrayList<Integer> oneRight = new ArrayList<>();
            ArrayList<Integer> twoLeft = new ArrayList<>();
            ArrayList<Integer> twoArrLeftHalf = new ArrayList<>();
            ArrayList<Integer> twoArrRightHalf = new ArrayList<>();
            ArrayList<Integer> twoRight = new ArrayList<>();

            /**
             * B项 2个点
             *  72
             *  217
             *  第一个点
             *  67-77
             * 第二个点
             *  212-222
             */

            int start1 = 115;
            int mid1= 120;
            int end1 =125;

            int start2 =260;
            int mid2= 265;
            int end2=270;


            for(int i=0;i<point.size();i++){

                if (i >= start1 -10 && i <= mid1) {
                    oneLeft.add(point.get(i));
                }

                if (i >= start1 && i <= mid1) {    //左边趋势
                    oneArrLeftHafl.add(point.get(i));
                }


                if (i >= mid1 && i <= end1 ) {  //右边趋势
                    oneArrRightHafl.add(point.get(i));
                }

                if (i >= mid1 && i <= end1+10) {
                    oneRight.add(point.get(i));
                }

                /**
                 * 第二点
                 */
                if (i >= start2-10 && i <= mid2) {
                    twoLeft.add(point.get(i));
                }

                //第二个点左边趋势
                if (i >= start2  && i <= mid2) {
                    twoArrLeftHalf.add(point.get(i));
                }
                //第二个点右边趋势
                if (i >= mid2 && i <= end2) {
                    twoArrRightHalf.add(point.get(i));
                }

                if (i >= mid2 && i <= end2+10) {
                    twoRight.add(point.get(i));
                }

            }



            double oneLeftK = this.getSlope(oneLeft);
            double oneArrLeftHalfK= this.getSlope(oneArrLeftHafl);
            double oneArrRightHalfk = this.getSlope(oneArrRightHafl);
            double oneRightK= this.getSlope(oneRight);

            double twoLeftK= this.getSlope(twoLeft);
            double twoArrLeftHalfK= this.getSlope(twoArrLeftHalf);
            double twoArrRightHalfK= this.getSlope(twoArrRightHalf);
            double twoRightK= this.getSlope(twoRight);



            //曲线判断时 斜率必须至少5条大于0.38否则认为接近直线

            int socer = 0;

            socer+=Math.abs(oneLeftK) >= lineK  ?  1 : 0;
            socer+=Math.abs(oneRightK) >= lineK  ?  1 : 0;
            socer+=Math.abs(twoLeftK) >= lineK  ?  1 : 0;
            socer+=Math.abs(twoRightK) >= lineK  ?  1 : 0;

            if(socer <=2){
                return  3;   //非分支识别
            }


            //趋势判断
            ArrayList<Boolean> result = new ArrayList<>();

            if(oneArrLeftHalfK - oneArrRightHalfk > 0.8){
                result.add(this.jugger(oneLeftK,oneArrLeftHalfK,"left"));
                result.add(this.jugger(oneRightK,oneArrRightHalfk,"right"));
            }

            if(twoArrLeftHalfK - twoArrRightHalfK > 0.8){
                result.add(this.jugger(twoLeftK,twoArrLeftHalfK,"left"));
                result.add(this.jugger(twoRightK,twoArrRightHalfK,"right"));
            }



            int num = this.score(result);
            if(num >=2){
                return  1; //分支识别
            }

            return 3; //分支识别失败

    }

    /**
     *
     * @param k 延续点趋势
     * @param comK 波形脉冲点趋势
     * @param type
     * @return
     */
    private boolean jugger(double k,double comK,String type){
        boolean res = false;

        switch (type){
            case "left"://左侧为上升趋势
                if(k<0){  //下降趋势
                    res= Math.abs(k) > Math.abs(comK)  &&  Math.abs(k-comK) >= 0.8 ? true : false;
                }
                if(k >0){ //上升趋势
                    res = Math.abs(k) < Math.abs(comK) && Math.abs(k-comK) >= 0.8 ? true : false;
                }
                return res;

            case "right": //右侧为下降沿趋势
                if(k<0){  //下降趋势
                    res = Math.abs(k) < Math.abs(comK) && Math.abs(k-comK) >= 0.8 ? true : false;
                }
                if(k>0){ //上升趋势
                    res= Math.abs(k) > Math.abs(comK)  &&  Math.abs(k-comK) >= 0.8 ? true : false;
                }
                return res;
        }
        return res;
    }


    /**
     *
     * @param reslut
     * @return
     */
    private int score(ArrayList<Boolean> reslut){
        int num =0;
        for(int i=0;i<reslut.size();i++){
            if(reslut.get(i)){
                num++;
            }
        }
        return num;
    }


    /**
     *
     * II采集与电表关系结构图
     * @param jsonArray
     */


    public String Analysis(JSONArray jsonArray){

        ArrayList<Map<String, String>> $IIcai = new ArrayList<>();
        ArrayList<Map<String,String>> $mater = new ArrayList<>();

        $IIcai=this.branch(jsonArray,1);
        $mater=this.branch(jsonArray,2);
        //只有一个II采的情况没有对应关系
       // System.out.println($mater);
         if($IIcai.isEmpty()){
             for (  Object obj: jsonArray) {
                 HashMap<String, String> IImap = new HashMap<>();
                 JSONObject jsonObj = (JSONObject) obj;
                 IImap.put("qrcode",(String) jsonObj.get("IIqrcode"));
                 IImap.put("parent","");
                 $IIcai.add(IImap);
             }

         }

        return  this.getTree($IIcai,$mater);

    }

    /**
     * type 1  II采集与II采的关系
     * type 2 电表与II采的关系
     * @param jsonArray
     * @param type
     * @return
     */

    public ArrayList<Map<String ,String>> branch(JSONArray jsonArray ,int type ){

        ArrayList<Map<String,String>> $mater = new ArrayList<>();  //电表和II采集关系
        ArrayList<Map<String,String>> $IIcai = new ArrayList<>();//II采和II采关系
        switch (type){
            case 1:
                for ( Object obj : jsonArray){
                    HashMap<String, String> IImap = new HashMap<>();
                    JSONObject jsonObj = (JSONObject) obj;
                    if(jsonObj.get("ao").equals("0")) continue;
                    if((boolean)jsonObj.get("isFork")){
                        IImap.put("qrcode",(String) jsonObj.get("qrcode"));
                        IImap.put("parent", (String) jsonObj.get("IIqrcode"));
                        //parent 是list
                    }else{
                        IImap.put("qrcode",(String) jsonObj.get("qrcode"));
                        IImap.put("parent","");
                    }
                    IImap.put("ao", (String) jsonObj.get("ao"));
                   //重复不添加


                        $IIcai.add(IImap);

                }
                return $IIcai;
            case 2:
                for ( Object obj : jsonArray){
                    JSONObject jsonObj = (JSONObject) obj;
                    if(jsonObj.get("ao").equals("1"))continue;
                    HashMap<String, String> map = new HashMap<>();
                    if((boolean)jsonObj.get("isFork")){
                        map.put("qrcode",(String) jsonObj.get("qrcode"));
                        map.put("parent", (String) jsonObj.get("IIqrcode"));
                    }else{
                        map.put("qrcode",(String) jsonObj.get("qrcode"));
                        //map.put("parent","");
                    }
                    //重复不添加
                    map.put("ao", (String) jsonObj.get("ao"));

                    $mater.add(map);
                }
                return $mater;
        }
        return new ArrayList<>();
    }
    /**
     *   生成树形结构json
     * @param IIcai
     * @param meter
     * @return
     */
    public String getTree(ArrayList<Map<String,String>> IIcai , ArrayList<Map<String,String>> meter) {
        //II采集上下层级关系
        HashMap<String, HashMap> IIMap = new HashMap<>();
        for (Map<String, String> value : IIcai) {
            String parentCode = value.get("parent");
            if ((parentCode == null || parentCode.length() <= 0) && !IIMap.containsKey(value.get("qrcode"))) {  //第一次入集合
                HashMap<String, Object> hashMap = new HashMap<>();
                hashMap.put("qrcode", value.get("qrcode"));
                hashMap.put("lev", (int) 1);
                hashMap.put("meter",new ArrayList<>()); //电表列表
                hashMap.put("child",new ArrayList<>()); //子类列表
                hashMap.put("parent",new ArrayList<>()); //父类列表
                IIMap.put(value.get("qrcode"), hashMap);
            } else { //有父类或者已经存在II采在集合中的情况
                if (IIMap.containsKey(value.get("qrcode"))) {
                    int lev = (int) IIMap.get(value.get("qrcode")).get("lev") + 1;
                    ArrayList parentList = (ArrayList) IIMap.get(value.get("qrcode")).get("parent");
                    if(parentList != null && !value.get("parent").isEmpty()) {
                        parentList.add(value.get("parent"));
                    }
                } else {   //存在父类元素第一次入集合
                    HashMap<String, Object> hashMap = new HashMap<>();
                    hashMap.put("qrcode", value.get("qrcode"));
                    hashMap.put("parent",new ArrayList<String>(){{add(value.get("parent"));}});
                    hashMap.put("lev", (int) 2);  //有父类起码2级开始
                    hashMap.put("meter",new ArrayList<>()); //电表列表
                    hashMap.put("child",new ArrayList<>());//子类列表
                    IIMap.put(value.get("qrcode"), hashMap);

                }

            }
        }

        /**
         * 递归排序lev
         * 有几个parentLIST就是几级别
         */
        for (String qrcodeIndex :IIMap.keySet()) {
            if (IIMap.get(qrcodeIndex).containsKey("parent")) {  //存在父节点列表
                ArrayList parentList = (ArrayList) IIMap.get(qrcodeIndex).get("parent");
                if (IIMap.get(qrcodeIndex).containsKey("lev")) {
                    IIMap.get(qrcodeIndex).put("lev", (int) parentList.size() + 1);
                }

            }
        }

        //II采与电表的层级关系
        ArrayList<HashMap> meterTree = new ArrayList<>();
        HashMap<String, HashMap<String,ArrayList>> meterMap = new HashMap<>();
        for (Map<String,String > value :meter) {
            String parentCode =  value.get("parent");
            if(parentCode == null || parentCode.length() <=0){
                continue;  //电表一般不存在父节点为空的情况
            }
            //已经存在键
            if(meterMap.containsKey(value.get("qrcode"))){
                if(!meterMap.get(value.get("qrcode")).get("parent").contains(value.get("parent"))){   //不存在parent 新增
                    meterMap.get(value.get("qrcode")).get("parent").add(value.get("parent"));
                }
            }else{
                HashMap<String , ArrayList> inlineHshmap = new HashMap<>();  //父类型列表
                ArrayList<String> prentList = new ArrayList<>();
                prentList.add(value.get("parent"));
                inlineHshmap.put("parent",prentList);
                meterMap.put(value.get("qrcode"),inlineHshmap);
            }
        }

        //把电表挂在II采叶节点（最深处）
        HashMap<String, HashMap> $IICaitree = new HashMap<>();
        $IICaitree.putAll(IIMap);
        for ( String qrcode : meterMap.keySet()) {
            //找到等级最高的II采
            ArrayList<String> IICaiList = new ArrayList<>();
            IICaiList = meterMap.get(qrcode).get("parent");
            String MaxLevIIqrcode = ""; //最深处II采集CODE
            int MaxLev = 0;

            //最深处II采
            for (String qrIIcode : IICaiList) {
                if(IIMap.containsKey(qrIIcode)) {
                    MaxLev = ((int) IIMap.get(qrIIcode).get("lev") >= MaxLev) ? (int) IIMap.get(qrIIcode).get("lev") : MaxLev;
                    MaxLevIIqrcode = ((int) IIMap.get(qrIIcode).get("lev") >= MaxLev) ? qrIIcode : MaxLevIIqrcode;
                }
            }
            /**
             * 最深处II采集
             */
            if($IICaitree.containsKey(MaxLevIIqrcode)){
                ArrayList meterList = (ArrayList) $IICaitree.get(MaxLevIIqrcode).get("meter");
                meterList.add(qrcode);
            }

        }

        //II采挂到上一级二采下面(深度优先)
         int MAXOUTLEV =0;
        for (String qrIIcode : $IICaitree.keySet()){
            MAXOUTLEV = ((int)IIMap.get(qrIIcode).get("lev") >= MAXOUTLEV) ? (int)IIMap.get(qrIIcode).get("lev") : MAXOUTLEV;
        }

        //深度优先
        while (MAXOUTLEV > 1){
            for (String qrIIcode : $IICaitree.keySet()){
                //挂载到上一层II采
                if((int)IIMap.get(qrIIcode).get("lev") == MAXOUTLEV){
                    ArrayList<String> parentIIcaiList = (ArrayList) $IICaitree.get(qrIIcode).get("parent");
                    String MaxLevIIqrcode = ""; //最深处II采集CODE
                    int MaxLev = 0;
                    //上一层II采
                    for (String IIcaiPrentqrcode : parentIIcaiList) {
                        if(IIMap.containsKey(IIcaiPrentqrcode)) {
                            MaxLev = ((int) IIMap.get(IIcaiPrentqrcode).get("lev") >= MaxLev) ? (int) IIMap.get(IIcaiPrentqrcode).get("lev") : MaxLev;
                            MaxLevIIqrcode = ((int) IIMap.get(IIcaiPrentqrcode).get("lev") >= MaxLev) ? IIcaiPrentqrcode : MaxLevIIqrcode;
                        }
                    }
                    //挂载II采
                    if($IICaitree.containsKey(MaxLevIIqrcode)){
                        ArrayList childList = (ArrayList) $IICaitree.get(MaxLevIIqrcode).get("child");
                        childList.add($IICaitree.get(qrIIcode));

                    }

                }
            }

            MAXOUTLEV--;
        }

        /**
         * 移除树枝
         */
    Iterator<Map.Entry<String, HashMap>> it = $IICaitree.entrySet().iterator();
        while(it.hasNext()){
        Map.Entry<String, HashMap> entry = it.next();
        HashMap inlineMap =  entry.getValue();
        if((int)inlineMap.get("lev") > 1){
            it.remove();
        }
    }

       return JSON.toJSONString($IICaitree);

}

}
